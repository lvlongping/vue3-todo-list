import type { ExtractPropTypes, PropType } from 'vue';
export declare const UploadFileStatus: import("vue-types").VueTypeDef<"error" | "success" | "done" | "uploading" | "removed">;
export interface HttpRequestHeader {
    [key: string]: string;
}
export interface VcFile extends File {
    uid: string;
    readonly lastModifiedDate: Date;
    readonly webkitRelativePath: string;
}
export declare type UploadFileStatus = 'error' | 'success' | 'done' | 'uploading' | 'removed';
export interface UploadFile<T = any> {
    uid: string;
    size?: number;
    name: string;
    fileName?: string;
    lastModified?: number;
    lastModifiedDate?: Date;
    url?: string;
    status?: UploadFileStatus;
    percent?: number;
    thumbUrl?: string;
    originFileObj?: any;
    response?: T;
    error?: any;
    linkProps?: any;
    type?: string;
    xhr?: T;
    preview?: string;
}
export interface UploadChangeParam<T extends object = UploadFile> {
    file: T;
    fileList: UploadFile[];
    event?: {
        percent: number;
    };
}
export declare const ShowUploadListInterface: import("vue-types").VueTypeLooseShape<{
    showRemoveIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
    showPreviewIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
}>;
export interface UploadLocale {
    uploading?: string;
    removeFile?: string;
    downloadFile?: string;
    uploadError?: string;
    previewFile?: string;
}
export declare const uploadProps: {
    type: import("vue-types").VueTypeDef<"select" | "drag">;
    name: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    defaultFileList: {
        type: PropType<UploadFile<any>[]>;
    };
    fileList: {
        type: PropType<UploadFile<any>[]>;
    };
    action: import("vue-types").VueTypeDef<any>;
    directory: import("vue-types").VueTypeValidableDef<boolean>;
    data: import("vue-types").VueTypeDef<any>;
    method: import("vue-types").VueTypeDef<"post" | "POST" | "PUT" | "PATCH" | "put" | "patch">;
    headers: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    showUploadList: import("vue-types").VueTypeDef<boolean | {
        showRemoveIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        showPreviewIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
    }>;
    multiple: import("vue-types").VueTypeValidableDef<boolean>;
    accept: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    beforeUpload: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    listType: import("vue-types").VueTypeDef<"picture" | "text" | "picture-card">;
    remove: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    supportServerRender: import("vue-types").VueTypeValidableDef<boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    customRequest: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    withCredentials: import("vue-types").VueTypeValidableDef<boolean>;
    openFileDialogOnClick: import("vue-types").VueTypeValidableDef<boolean>;
    locale: {
        type: PropType<UploadLocale>;
    };
    height: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    previewFile: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    transformFile: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onChange: {
        type: PropType<(info: UploadChangeParam) => void>;
    };
    onPreview: {
        type: PropType<(file: UploadFile) => void>;
    };
    onRemove: {
        type: PropType<(file: UploadFile) => void | boolean | Promise<void | boolean>>;
    };
    onDownload: {
        type: PropType<(file: UploadFile) => void>;
    };
    'onUpdate:fileList': {
        type: PropType<(files: UploadFile[]) => void>;
    };
};
export declare type UploadProps = Partial<ExtractPropTypes<typeof uploadProps>>;
export declare const uploadListProps: {
    listType: import("vue-types").VueTypeDef<"picture" | "text" | "picture-card">;
    items: {
        type: PropType<UploadFile<any>[]>;
    };
    progressAttr: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showRemoveIcon: import("vue-types").VueTypeValidableDef<boolean>;
    showDownloadIcon: import("vue-types").VueTypeValidableDef<boolean>;
    showPreviewIcon: import("vue-types").VueTypeValidableDef<boolean>;
    locale: {
        type: PropType<UploadLocale>;
    };
    previewFile: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onPreview: {
        type: PropType<(file: UploadFile) => void>;
    };
    onRemove: {
        type: PropType<(file: UploadFile) => void | boolean>;
    };
    onDownload: {
        type: PropType<(file: UploadFile) => void>;
    };
};
export declare type UploadListProps = Partial<ExtractPropTypes<typeof uploadListProps>>;
