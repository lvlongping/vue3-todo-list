import type { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    vertical: import("vue-types").VueTypeValidableDef<boolean>;
    offset: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    min: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    max: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    value: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    tabindex: import("vue-types").VueTypeDef<string | number>;
    reverse: import("vue-types").VueTypeValidableDef<boolean>;
    ariaLabel: StringConstructor;
    ariaLabelledBy: StringConstructor;
    ariaValueTextFormatter: FunctionConstructor;
    onMouseenter: {
        type: PropType<(payload: MouseEvent) => void>;
    };
    onMouseleave: {
        type: PropType<(payload: MouseEvent) => void>;
    };
    onMousedown: {
        type: PropType<(payload: MouseEvent) => void>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    vertical: import("vue-types").VueTypeValidableDef<boolean>;
    offset: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    min: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    max: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    value: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    tabindex: import("vue-types").VueTypeDef<string | number>;
    reverse: import("vue-types").VueTypeValidableDef<boolean>;
    ariaLabel: StringConstructor;
    ariaLabelledBy: StringConstructor;
    ariaValueTextFormatter: FunctionConstructor;
    onMouseenter: {
        type: PropType<(payload: MouseEvent) => void>;
    };
    onMouseleave: {
        type: PropType<(payload: MouseEvent) => void>;
    };
    onMousedown: {
        type: PropType<(payload: MouseEvent) => void>;
    };
}>>, {
    prefixCls: string;
    offset: number;
    value: number;
    max: number;
    min: number;
}>;
export default _default;
