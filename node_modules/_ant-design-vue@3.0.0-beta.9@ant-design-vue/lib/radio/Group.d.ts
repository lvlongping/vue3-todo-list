import type { PropType, ExtractPropTypes } from 'vue';
declare const RadioGroupSizeTypes: ["large", "default", "small"];
export declare type RadioGroupSize = typeof RadioGroupSizeTypes[number];
declare const RadioGroupOptionTypes: ["default", "button"];
export declare type RadioGroupOption = typeof RadioGroupOptionTypes[number];
export declare type RadioGroupChildOption = {
    label?: any;
    value: any;
    disabled?: boolean;
};
declare const radioGroupProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: import("vue-types").VueTypeValidableDef<any>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "large"> & {
        default: "default" | "small" | "large";
    };
    options: {
        type: PropType<(String | RadioGroupChildOption)[]>;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    name: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    buttonStyle: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    optionType: import("vue-types").VueTypeDef<"default" | "button"> & {
        default: "default" | "button";
    };
};
export declare type RadioGroupProps = Partial<ExtractPropTypes<typeof radioGroupProps>>;
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: import("vue-types").VueTypeValidableDef<any>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "large"> & {
        default: "default" | "small" | "large";
    };
    options: {
        type: PropType<(String | RadioGroupChildOption)[]>;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    name: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    buttonStyle: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    optionType: import("vue-types").VueTypeDef<"default" | "button"> & {
        default: "default" | "button";
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:value")[], "change" | "update:value", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: import("vue-types").VueTypeValidableDef<any>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "large"> & {
        default: "default" | "small" | "large";
    };
    options: {
        type: PropType<(String | RadioGroupChildOption)[]>;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    name: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    buttonStyle: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    optionType: import("vue-types").VueTypeDef<"default" | "button"> & {
        default: "default" | "button";
    };
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
}, {
    prefixCls: string;
    size: "default" | "small" | "large";
    name: string;
    id: string;
    buttonStyle: string;
    optionType: "default" | "button";
}>;
export default _default;
