import type { ExtractPropTypes, PropType } from 'vue';
import type { TransferItem } from './index';
export declare const transferListProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    dataSource: {
        type: PropType<TransferItem[]>;
        default: any[];
    };
    filter: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    filterOption: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    checkedKeys: import("vue-types").VueTypeDef<string[]>;
    handleFilter: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    handleClear: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    renderItem: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    showSearch: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    searchPlaceholder: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    itemUnit: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    itemsUnit: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    renderList: import("vue-types").VueTypeValidableDef<any>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    direction: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showSelectAll: import("vue-types").VueTypeValidableDef<boolean>;
    remove: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectAll: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectCurrent: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectInvert: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    removeAll: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    removeCurrent: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectAllLabel: import("vue-types").VueTypeValidableDef<any>;
    showRemove: import("vue-types").VueTypeValidableDef<boolean>;
    pagination: import("vue-types").VueTypeValidableDef<any>;
    onItemSelect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onItemSelectAll: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onItemRemove: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onScroll: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
export declare type TransferListProps = Partial<ExtractPropTypes<typeof transferListProps>>;
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    dataSource: {
        type: PropType<TransferItem[]>;
        default: any[];
    };
    filter: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    filterOption: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    checkedKeys: import("vue-types").VueTypeDef<string[]>;
    handleFilter: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    handleClear: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    renderItem: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    showSearch: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    searchPlaceholder: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    itemUnit: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    itemsUnit: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    renderList: import("vue-types").VueTypeValidableDef<any>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    direction: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showSelectAll: import("vue-types").VueTypeValidableDef<boolean>;
    remove: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectAll: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectCurrent: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectInvert: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    removeAll: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    removeCurrent: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectAllLabel: import("vue-types").VueTypeValidableDef<any>;
    showRemove: import("vue-types").VueTypeValidableDef<boolean>;
    pagination: import("vue-types").VueTypeValidableDef<any>;
    onItemSelect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onItemSelectAll: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onItemRemove: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onScroll: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "itemSelect" | "itemRemove" | "itemSelectAll")[], "scroll" | "itemSelect" | "itemRemove" | "itemSelectAll", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    dataSource: {
        type: PropType<TransferItem[]>;
        default: any[];
    };
    filter: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    filterOption: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    checkedKeys: import("vue-types").VueTypeDef<string[]>;
    handleFilter: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    handleClear: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    renderItem: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    showSearch: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    searchPlaceholder: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    itemUnit: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    itemsUnit: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    renderList: import("vue-types").VueTypeValidableDef<any>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    direction: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showSelectAll: import("vue-types").VueTypeValidableDef<boolean>;
    remove: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectAll: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectCurrent: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectInvert: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    removeAll: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    removeCurrent: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    selectAllLabel: import("vue-types").VueTypeValidableDef<any>;
    showRemove: import("vue-types").VueTypeValidableDef<boolean>;
    pagination: import("vue-types").VueTypeValidableDef<any>;
    onItemSelect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onItemSelectAll: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onItemRemove: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onScroll: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}>> & {
    onScroll?: (...args: any[]) => any;
    onItemSelect?: (...args: any[]) => any;
    onItemRemove?: (...args: any[]) => any;
    onItemSelectAll?: (...args: any[]) => any;
}, {
    onScroll: (...args: any[]) => any;
    prefixCls: string;
    filter: string;
    direction: string;
    remove: string;
    renderItem: (...args: any[]) => any;
    handleClear: (...args: any[]) => any;
    searchPlaceholder: string;
    itemUnit: string;
    itemsUnit: string;
    selectAll: string;
    selectCurrent: string;
    selectInvert: string;
    removeAll: string;
    removeCurrent: string;
    showSearch: boolean;
    filterOption: (...args: any[]) => any;
    onItemSelect: (...args: any[]) => any;
    onItemRemove: (...args: any[]) => any;
    dataSource: TransferItem[];
    handleFilter: (...args: any[]) => any;
    onItemSelectAll: (...args: any[]) => any;
}>;
export default _default;
