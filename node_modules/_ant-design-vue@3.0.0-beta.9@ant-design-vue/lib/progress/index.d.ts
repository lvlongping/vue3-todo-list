export type { ProgressProps } from './props';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            width: number;
            strokeWidth: number;
            success: import("./props").SuccessProps;
            gapDegree: number;
            percent: number;
            trailColor: string;
            successPercent: number;
            steps: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            type: import("vue-types").VueTypeDef<"circle" | "line" | "dashboard">;
            percent: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            format: {
                type: import("vue").PropType<(percent?: number, successPercent?: number) => import("../_util/type").VueNode>;
            };
            status: import("vue-types").VueTypeDef<"normal" | "active" | "success" | "exception">;
            showInfo: import("vue-types").VueTypeValidableDef<boolean>;
            strokeWidth: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            strokeLinecap: import("vue-types").VueTypeDef<"round" | "butt" | "square">;
            strokeColor: {
                type: import("vue").PropType<string | import("./props").ProgressGradient>;
            };
            trailColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            width: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            success: {
                type: import("vue").PropType<import("./props").SuccessProps>;
                default: () => import("./props").SuccessProps;
            };
            gapDegree: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            gapPosition: import("vue-types").VueTypeDef<"left" | "right" | "bottom" | "top">;
            size: import("vue-types").VueTypeDef<"default" | "small">;
            steps: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            successPercent: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            title: StringConstructor;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "width" | "strokeWidth" | "success" | "gapDegree" | "percent" | "trailColor" | "successPercent" | "steps">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            type: import("vue-types").VueTypeDef<"circle" | "line" | "dashboard">;
            percent: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            format: {
                type: import("vue").PropType<(percent?: number, successPercent?: number) => import("../_util/type").VueNode>;
            };
            status: import("vue-types").VueTypeDef<"normal" | "active" | "success" | "exception">;
            showInfo: import("vue-types").VueTypeValidableDef<boolean>;
            strokeWidth: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            strokeLinecap: import("vue-types").VueTypeDef<"round" | "butt" | "square">;
            strokeColor: {
                type: import("vue").PropType<string | import("./props").ProgressGradient>;
            };
            trailColor: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            width: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            success: {
                type: import("vue").PropType<import("./props").SuccessProps>;
                default: () => import("./props").SuccessProps;
            };
            gapDegree: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            gapPosition: import("vue-types").VueTypeDef<"left" | "right" | "bottom" | "top">;
            size: import("vue-types").VueTypeDef<"default" | "small">;
            steps: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            successPercent: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            title: StringConstructor;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            width: number;
            strokeWidth: number;
            success: import("./props").SuccessProps;
            gapDegree: number;
            percent: number;
            trailColor: string;
            successPercent: number;
            steps: number;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        type: import("vue-types").VueTypeDef<"circle" | "line" | "dashboard">;
        percent: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        format: {
            type: import("vue").PropType<(percent?: number, successPercent?: number) => import("../_util/type").VueNode>;
        };
        status: import("vue-types").VueTypeDef<"normal" | "active" | "success" | "exception">;
        showInfo: import("vue-types").VueTypeValidableDef<boolean>;
        strokeWidth: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        strokeLinecap: import("vue-types").VueTypeDef<"round" | "butt" | "square">;
        strokeColor: {
            type: import("vue").PropType<string | import("./props").ProgressGradient>;
        };
        trailColor: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        width: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        success: {
            type: import("vue").PropType<import("./props").SuccessProps>;
            default: () => import("./props").SuccessProps;
        };
        gapDegree: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        gapPosition: import("vue-types").VueTypeDef<"left" | "right" | "bottom" | "top">;
        size: import("vue-types").VueTypeDef<"default" | "small">;
        steps: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        successPercent: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        title: StringConstructor;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    type: import("vue-types").VueTypeDef<"circle" | "line" | "dashboard">;
    percent: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    format: {
        type: import("vue").PropType<(percent?: number, successPercent?: number) => import("../_util/type").VueNode>;
    };
    status: import("vue-types").VueTypeDef<"normal" | "active" | "success" | "exception">;
    showInfo: import("vue-types").VueTypeValidableDef<boolean>;
    strokeWidth: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    strokeLinecap: import("vue-types").VueTypeDef<"round" | "butt" | "square">;
    strokeColor: {
        type: import("vue").PropType<string | import("./props").ProgressGradient>;
    };
    trailColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    width: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    success: {
        type: import("vue").PropType<import("./props").SuccessProps>;
        default: () => import("./props").SuccessProps;
    };
    gapDegree: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    gapPosition: import("vue-types").VueTypeDef<"left" | "right" | "bottom" | "top">;
    size: import("vue-types").VueTypeDef<"default" | "small">;
    steps: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    successPercent: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    title: StringConstructor;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    width: number;
    strokeWidth: number;
    success: import("./props").SuccessProps;
    gapDegree: number;
    percent: number;
    trailColor: string;
    successPercent: number;
    steps: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
