import type { Plugin } from 'vue';
import DropdownButton from './dropdown-button';
import { dropdownProps, dropdownButtonProps } from './props';
export type { DropdownProps } from './dropdown';
export type { DropdownButtonProps } from './dropdown-button';
export { DropdownButton, dropdownProps, dropdownButtonProps };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            transitionName: string;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            openClassName: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            arrow: import("vue-types").VueTypeValidableDef<boolean>;
            trigger: {
                type: import("vue").PropType<"click" | "contextmenu" | "hover" | ("click" | "contextmenu" | "hover")[]>;
            };
            overlay: import("vue-types").VueTypeValidableDef<any>;
            visible: import("vue-types").VueTypeValidableDef<boolean>;
            disabled: import("vue-types").VueTypeValidableDef<boolean>;
            align: {
                type: import("vue").PropType<{
                    points?: [string, string];
                    offset?: [number, number];
                    targetOffset?: [number, number];
                    overflow?: {
                        adjustX?: boolean;
                        adjustY?: boolean;
                    };
                    useCssRight?: boolean;
                    useCssBottom?: boolean;
                    useCssTransform?: boolean;
                }>;
            };
            getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            transitionName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            placement: import("vue-types").VueTypeDef<"bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "topCenter" | "bottomCenter">;
            overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
            forceRender: import("vue-types").VueTypeValidableDef<boolean>;
            mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            openClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            minOverlayWidthMatchTrigger: import("vue-types").VueTypeValidableDef<boolean>;
            onVisibleChange: {
                type: import("vue").PropType<(val: boolean) => void>;
            };
            'onUpdate:visible': {
                type: import("vue").PropType<(val: boolean) => void>;
            };
        }>> & {
            "onUpdate:visible"?: (...args: any[]) => any;
            onVisibleChange?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "getPopupContainer" | "transitionName" | "mouseEnterDelay" | "mouseLeaveDelay" | "overlayClassName" | "openClassName">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "update:visible" | "visibleChange", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            arrow: import("vue-types").VueTypeValidableDef<boolean>;
            trigger: {
                type: import("vue").PropType<"click" | "contextmenu" | "hover" | ("click" | "contextmenu" | "hover")[]>;
            };
            overlay: import("vue-types").VueTypeValidableDef<any>;
            visible: import("vue-types").VueTypeValidableDef<boolean>;
            disabled: import("vue-types").VueTypeValidableDef<boolean>;
            align: {
                type: import("vue").PropType<{
                    points?: [string, string];
                    offset?: [number, number];
                    targetOffset?: [number, number];
                    overflow?: {
                        adjustX?: boolean;
                        adjustY?: boolean;
                    };
                    useCssRight?: boolean;
                    useCssBottom?: boolean;
                    useCssTransform?: boolean;
                }>;
            };
            getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            transitionName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            placement: import("vue-types").VueTypeDef<"bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "topCenter" | "bottomCenter">;
            overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
            forceRender: import("vue-types").VueTypeValidableDef<boolean>;
            mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            openClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            minOverlayWidthMatchTrigger: import("vue-types").VueTypeValidableDef<boolean>;
            onVisibleChange: {
                type: import("vue").PropType<(val: boolean) => void>;
            };
            'onUpdate:visible': {
                type: import("vue").PropType<(val: boolean) => void>;
            };
        }>> & {
            "onUpdate:visible"?: (...args: any[]) => any;
            onVisibleChange?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "visibleChange")[], string, {
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            transitionName: string;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            openClassName: string;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        arrow: import("vue-types").VueTypeValidableDef<boolean>;
        trigger: {
            type: import("vue").PropType<"click" | "contextmenu" | "hover" | ("click" | "contextmenu" | "hover")[]>;
        };
        overlay: import("vue-types").VueTypeValidableDef<any>;
        visible: import("vue-types").VueTypeValidableDef<boolean>;
        disabled: import("vue-types").VueTypeValidableDef<boolean>;
        align: {
            type: import("vue").PropType<{
                points?: [string, string];
                offset?: [number, number];
                targetOffset?: [number, number];
                overflow?: {
                    adjustX?: boolean;
                    adjustY?: boolean;
                };
                useCssRight?: boolean;
                useCssBottom?: boolean;
                useCssTransform?: boolean;
            }>;
        };
        getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        transitionName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        placement: import("vue-types").VueTypeDef<"bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "topCenter" | "bottomCenter">;
        overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
        forceRender: import("vue-types").VueTypeValidableDef<boolean>;
        mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        openClassName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        minOverlayWidthMatchTrigger: import("vue-types").VueTypeValidableDef<boolean>;
        onVisibleChange: {
            type: import("vue").PropType<(val: boolean) => void>;
        };
        'onUpdate:visible': {
            type: import("vue").PropType<(val: boolean) => void>;
        };
    }>> & {
        "onUpdate:visible"?: (...args: any[]) => any;
        onVisibleChange?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    arrow: import("vue-types").VueTypeValidableDef<boolean>;
    trigger: {
        type: import("vue").PropType<"click" | "contextmenu" | "hover" | ("click" | "contextmenu" | "hover")[]>;
    };
    overlay: import("vue-types").VueTypeValidableDef<any>;
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    align: {
        type: import("vue").PropType<{
            points?: [string, string];
            offset?: [number, number];
            targetOffset?: [number, number];
            overflow?: {
                adjustX?: boolean;
                adjustY?: boolean;
            };
            useCssRight?: boolean;
            useCssBottom?: boolean;
            useCssTransform?: boolean;
        }>;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: import("vue-types").VueTypeDef<"bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "topCenter" | "bottomCenter">;
    overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    forceRender: import("vue-types").VueTypeValidableDef<boolean>;
    mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    openClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    minOverlayWidthMatchTrigger: import("vue-types").VueTypeValidableDef<boolean>;
    onVisibleChange: {
        type: import("vue").PropType<(val: boolean) => void>;
    };
    'onUpdate:visible': {
        type: import("vue").PropType<(val: boolean) => void>;
    };
}>> & {
    "onUpdate:visible"?: (...args: any[]) => any;
    onVisibleChange?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "visibleChange")[], "update:visible" | "visibleChange", {
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    transitionName: string;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    overlayClassName: string;
    openClassName: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Button: typeof DropdownButton;
};
export default _default;
