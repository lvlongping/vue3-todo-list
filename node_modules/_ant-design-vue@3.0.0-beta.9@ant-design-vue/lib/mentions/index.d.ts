import type { App, PropType, ExtractPropTypes } from 'vue';
import { nextTick } from 'vue';
interface MentionsConfig {
    prefix?: string | string[];
    split?: string;
}
export interface MentionsOptionProps {
    value: string;
    disabled?: boolean;
    label?: string | number | ((o: MentionsOptionProps) => any);
    [key: string]: any;
}
interface MentionsEntity {
    prefix: string;
    value: string;
}
export declare type MentionPlacement = 'top' | 'bottom';
declare const mentionsProps: {
    loading: import("vue-types").VueTypeValidableDef<boolean>;
    onFocus: {
        type: PropType<(e: FocusEvent) => void>;
    };
    onBlur: {
        type: PropType<(e: FocusEvent) => void>;
    };
    onSelect: {
        type: PropType<(option: MentionsOptionProps, prefix: string) => void>;
    };
    onChange: {
        type: PropType<(text: string) => void>;
    };
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    defaultValue: StringConstructor;
    id: StringConstructor;
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    prefix: import("vue-types").VueTypeDef<string | string[]>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    split: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: import("vue-types").VueTypeDef<"bottom" | "top">;
    character: import("vue-types").VueTypeValidableDef<any>;
    characterRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    filterOption: {
        type: PropType<false | typeof import("../vc-mentions/src/util").filterOption>;
    };
    validateSearch: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    getPopupContainer: {
        type: PropType<() => HTMLElement>;
    };
    options: {
        type: PropType<Partial<ExtractPropTypes<{
            value: StringConstructor;
            disabled: BooleanConstructor;
            label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
        }>>>;
        default: () => any;
    };
    rows: (StringConstructor | NumberConstructor)[];
    direction: {
        type: PropType<import("../vc-mentions/src/mentionsProps").Direction>;
    };
};
export declare type MentionsProps = Partial<ExtractPropTypes<typeof mentionsProps>>;
export declare const MentionsOption: import("vue").DefineComponent<{
    value: StringConstructor;
    disabled: BooleanConstructor;
    label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
}, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, any, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    value: StringConstructor;
    disabled: BooleanConstructor;
    label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
}>>, {
    disabled: boolean;
}>;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            split: string;
            prefixCls: string;
            value: string;
            transitionName: string;
            options: any;
            characterRender: (...args: any[]) => any;
            validateSearch: (...args: any[]) => any;
        }> & Omit<Readonly<ExtractPropTypes<{
            loading: import("vue-types").VueTypeValidableDef<boolean>;
            onFocus: {
                type: PropType<(e: FocusEvent) => void>;
            };
            onBlur: {
                type: PropType<(e: FocusEvent) => void>;
            };
            onSelect: {
                type: PropType<(option: MentionsOptionProps, prefix: string) => void>;
            };
            onChange: {
                type: PropType<(text: string) => void>;
            };
            notFoundContent: import("vue-types").VueTypeValidableDef<any>;
            defaultValue: StringConstructor;
            id: StringConstructor;
            autofocus: import("vue-types").VueTypeValidableDef<boolean>;
            prefix: import("vue-types").VueTypeDef<string | string[]>;
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            value: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            disabled: import("vue-types").VueTypeValidableDef<boolean>;
            split: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            transitionName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            placement: import("vue-types").VueTypeDef<"bottom" | "top">;
            character: import("vue-types").VueTypeValidableDef<any>;
            characterRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            filterOption: {
                type: PropType<false | typeof import("../vc-mentions/src/util").filterOption>;
            };
            validateSearch: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            getPopupContainer: {
                type: PropType<() => HTMLElement>;
            };
            options: {
                type: PropType<Partial<ExtractPropTypes<{
                    value: StringConstructor;
                    disabled: BooleanConstructor;
                    label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
                }>>>;
                default: () => any;
            };
            rows: (StringConstructor | NumberConstructor)[];
            direction: {
                type: PropType<import("../vc-mentions/src/mentionsProps").Direction>;
            };
        }>> & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            onSelect?: (...args: any[]) => any;
            "onUpdate:value"?: (...args: any[]) => any;
            onPressenter?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "split" | "prefixCls" | "value" | "transitionName" | "options" | "characterRender" | "validateSearch">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "blur" | "change" | "focus" | "select" | "update:value" | "pressenter", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
            loading: import("vue-types").VueTypeValidableDef<boolean>;
            onFocus: {
                type: PropType<(e: FocusEvent) => void>;
            };
            onBlur: {
                type: PropType<(e: FocusEvent) => void>;
            };
            onSelect: {
                type: PropType<(option: MentionsOptionProps, prefix: string) => void>;
            };
            onChange: {
                type: PropType<(text: string) => void>;
            };
            notFoundContent: import("vue-types").VueTypeValidableDef<any>;
            defaultValue: StringConstructor;
            id: StringConstructor;
            autofocus: import("vue-types").VueTypeValidableDef<boolean>;
            prefix: import("vue-types").VueTypeDef<string | string[]>;
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            value: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            disabled: import("vue-types").VueTypeValidableDef<boolean>;
            split: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            transitionName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            placement: import("vue-types").VueTypeDef<"bottom" | "top">;
            character: import("vue-types").VueTypeValidableDef<any>;
            characterRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            filterOption: {
                type: PropType<false | typeof import("../vc-mentions/src/util").filterOption>;
            };
            validateSearch: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            getPopupContainer: {
                type: PropType<() => HTMLElement>;
            };
            options: {
                type: PropType<Partial<ExtractPropTypes<{
                    value: StringConstructor;
                    disabled: BooleanConstructor;
                    label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
                }>>>;
                default: () => any;
            };
            rows: (StringConstructor | NumberConstructor)[];
            direction: {
                type: PropType<import("../vc-mentions/src/mentionsProps").Direction>;
            };
        }>> & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            onSelect?: (...args: any[]) => any;
            "onUpdate:value"?: (...args: any[]) => any;
            onPressenter?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "select" | "update:value" | "pressenter")[], string, {
            split: string;
            prefixCls: string;
            value: string;
            transitionName: string;
            options: any;
            characterRender: (...args: any[]) => any;
            validateSearch: (...args: any[]) => any;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<ExtractPropTypes<{
        loading: import("vue-types").VueTypeValidableDef<boolean>;
        onFocus: {
            type: PropType<(e: FocusEvent) => void>;
        };
        onBlur: {
            type: PropType<(e: FocusEvent) => void>;
        };
        onSelect: {
            type: PropType<(option: MentionsOptionProps, prefix: string) => void>;
        };
        onChange: {
            type: PropType<(text: string) => void>;
        };
        notFoundContent: import("vue-types").VueTypeValidableDef<any>;
        defaultValue: StringConstructor;
        id: StringConstructor;
        autofocus: import("vue-types").VueTypeValidableDef<boolean>;
        prefix: import("vue-types").VueTypeDef<string | string[]>;
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        value: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        disabled: import("vue-types").VueTypeValidableDef<boolean>;
        split: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        transitionName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        placement: import("vue-types").VueTypeDef<"bottom" | "top">;
        character: import("vue-types").VueTypeValidableDef<any>;
        characterRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        filterOption: {
            type: PropType<false | typeof import("../vc-mentions/src/util").filterOption>;
        };
        validateSearch: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        getPopupContainer: {
            type: PropType<() => HTMLElement>;
        };
        options: {
            type: PropType<Partial<ExtractPropTypes<{
                value: StringConstructor;
                disabled: BooleanConstructor;
                label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
            }>>>;
            default: () => any;
        };
        rows: (StringConstructor | NumberConstructor)[];
        direction: {
            type: PropType<import("../vc-mentions/src/mentionsProps").Direction>;
        };
    }>> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        onSelect?: (...args: any[]) => any;
        "onUpdate:value"?: (...args: any[]) => any;
        onPressenter?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
    loading: import("vue-types").VueTypeValidableDef<boolean>;
    onFocus: {
        type: PropType<(e: FocusEvent) => void>;
    };
    onBlur: {
        type: PropType<(e: FocusEvent) => void>;
    };
    onSelect: {
        type: PropType<(option: MentionsOptionProps, prefix: string) => void>;
    };
    onChange: {
        type: PropType<(text: string) => void>;
    };
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    defaultValue: StringConstructor;
    id: StringConstructor;
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    prefix: import("vue-types").VueTypeDef<string | string[]>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    split: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: import("vue-types").VueTypeDef<"bottom" | "top">;
    character: import("vue-types").VueTypeValidableDef<any>;
    characterRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    filterOption: {
        type: PropType<false | typeof import("../vc-mentions/src/util").filterOption>;
    };
    validateSearch: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    getPopupContainer: {
        type: PropType<() => HTMLElement>;
    };
    options: {
        type: PropType<Partial<ExtractPropTypes<{
            value: StringConstructor;
            disabled: BooleanConstructor;
            label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
        }>>>;
        default: () => any;
    };
    rows: (StringConstructor | NumberConstructor)[];
    direction: {
        type: PropType<import("../vc-mentions/src/mentionsProps").Direction>;
    };
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onSelect?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
    onPressenter?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "select" | "update:value" | "pressenter")[], "select" | "blur" | "change" | "focus" | "update:value" | "pressenter", {
    split: string;
    prefixCls: string;
    value: string;
    transitionName: string;
    options: any;
    characterRender: (...args: any[]) => any;
    validateSearch: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Option: import("vue").DefineComponent<{
        value: StringConstructor;
        disabled: BooleanConstructor;
        label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
    }, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, any, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
        value: StringConstructor;
        disabled: BooleanConstructor;
        label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
    }>>, {
        disabled: boolean;
    }>;
    getMentions: (value: string, config: MentionsConfig) => MentionsEntity[];
    install: (app: App) => App<any>;
};
export default _default;
