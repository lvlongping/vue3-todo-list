import type { Plugin, ExtractPropTypes } from 'vue';
import Option from './Option';
import OptGroup from './OptGroup';
declare const autoCompleteProps: {
    dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    dropdownMenuStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    dropdownMatchSelectWidth: {
        type: (BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e: FocusEvent) => void>;
    };
    onBlur: {
        type: import("vue").PropType<(e: FocusEvent) => void>;
    };
    onChange: import("vue").PropType<(value: import("../select").SelectValue, option: import("../select").DefaultOptionType | import("../select").DefaultOptionType[]) => void>;
    onKeydown: import("vue").PropType<(e: KeyboardEvent) => void>;
    onKeyup: import("vue").PropType<(e: KeyboardEvent) => void>;
    onClick: import("vue").PropType<(e: MouseEvent) => void>;
    onMousedown: import("vue").PropType<(e: MouseEvent) => void>;
    onMouseenter: import("vue").PropType<(e: MouseEvent) => void>;
    onMouseleave: import("vue").PropType<(e: MouseEvent) => void>;
    onSelect: import("vue").PropType<import("../vc-select/Select").SelectHandler<import("../select").SelectValue, import("../select").DefaultOptionType>>;
    prefixCls: StringConstructor;
    size: import("vue").PropType<import("../config-provider").SizeType>;
    direction: {
        type: import("vue").PropType<"ltr" | "rtl">;
    };
    open: {
        type: BooleanConstructor;
        default: any;
    };
    animation: StringConstructor;
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    value: {
        type: import("vue").PropType<import("../select").SelectValue>;
    };
    tabindex: NumberConstructor;
    getPopupContainer: {
        type: import("vue").PropType<import("../vc-select/BaseSelect").RenderDOMFunc>;
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("../select").SelectValue>;
    };
    transitionName: StringConstructor;
    showAction: {
        type: import("vue").PropType<("click" | "focus")[]>;
    };
    dropdownClassName: StringConstructor;
    dropdownAlign: import("vue-types").VueTypeValidableDef<any>;
    placeholder: import("vue-types").VueTypeValidableDef<any>;
    allowClear: {
        type: BooleanConstructor;
        default: any;
    };
    autofocus: BooleanConstructor;
    defaultOpen: {
        type: BooleanConstructor;
        default: any;
    };
    id: StringConstructor;
    suffixIcon: import("vue-types").VueTypeValidableDef<any>;
    clearIcon: import("vue-types").VueTypeValidableDef<any>;
    'onUpdate:value': import("vue").PropType<(val: import("../select").SelectValue) => void>;
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: import("vue").PropType<import("../select").DefaultOptionType[]>;
    placement: {
        type: import("vue").PropType<import("../vc-select/BaseSelect").Placement>;
    };
    children: import("vue").PropType<import("../_util/type").VueNode[]>;
    onDeselect: import("vue").PropType<import("../vc-select/Select").SelectHandler<import("../select").SelectValue, import("../select").DefaultOptionType>>;
    onSearch: import("vue").PropType<(value: string) => void>;
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    fieldNames: import("vue").PropType<import("../vc-select/Select").FieldNames>;
    dropdownStyle: {
        type: import("vue").PropType<import("vue").CSSProperties>;
    };
    dropdownRender: {
        type: import("vue").PropType<import("../vc-select/BaseSelect").DropdownRender>;
    };
    showSearch: {
        type: BooleanConstructor;
        default: any;
    };
    searchValue: StringConstructor;
    onInputKeyDown: import("vue").PropType<(e: KeyboardEvent) => void>;
    removeIcon: import("vue-types").VueTypeValidableDef<any>;
    maxTagCount: {
        type: import("vue").PropType<number | "responsive">;
    };
    maxTagTextLength: NumberConstructor;
    maxTagPlaceholder: import("vue-types").VueTypeValidableDef<any>;
    tokenSeparators: {
        type: import("vue").PropType<string[]>;
    };
    tagRender: {
        type: import("vue").PropType<(props: import("../vc-select/BaseSelect").CustomTagProps) => any>;
    };
    choiceTransitionName: {
        type: StringConstructor;
        default: string;
    };
    optionLabelRender: {
        type: import("vue").PropType<(option: Record<string, any>) => any>;
    };
    onClear: import("vue").PropType<() => void>;
    onDropdownVisibleChange: {
        type: import("vue").PropType<(open: boolean) => void>;
    };
    getRawInputElement: {
        type: import("vue").PropType<() => any>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: any;
    };
    onPopupScroll: import("vue").PropType<(e: UIEvent) => void>;
    menuItemSelectedIcon: import("vue-types").VueTypeValidableDef<any>;
    listHeight: NumberConstructor;
    listItemHeight: NumberConstructor;
    inputValue: StringConstructor;
    autoClearSearchValue: {
        type: BooleanConstructor;
        default: any;
    };
    filterOption: {
        type: import("vue").PropType<boolean | import("../vc-select/Select").FilterFunc<import("../select").DefaultOptionType>>;
        default: any;
    };
    filterSort: import("vue").PropType<(optionA: import("../select").DefaultOptionType, optionB: import("../select").DefaultOptionType) => number>;
    optionFilterProp: StringConstructor;
    defaultActiveFirstOption: {
        type: BooleanConstructor;
        default: any;
    };
    itemIcon: import("vue-types").VueTypeValidableDef<any>;
};
export declare type AutoCompleteProps = Partial<ExtractPropTypes<typeof autoCompleteProps>>;
export declare const AutoCompleteOption: import("./Option").OptionFC;
export declare const AutoCompleteOptGroup: import("./OptGroup").OptionGroupFC;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            open: boolean;
            disabled: boolean;
            virtual: boolean;
            dropdownMatchSelectWidth: number | boolean;
            transitionName: string;
            allowClear: boolean;
            defaultOpen: boolean;
            bordered: boolean;
            choiceTransitionName: string;
            showArrow: boolean;
            autoClearSearchValue: boolean;
            filterOption: any;
            defaultActiveFirstOption: boolean;
            dataSource: unknown[];
        }> & Omit<Readonly<ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            showSearch: import("vue-types").VueTypeValidableDef<boolean>;
            transitionName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            choiceTransitionName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            } & {
                default: string;
            };
            autofocus: import("vue-types").VueTypeValidableDef<boolean>;
            backfill: import("vue-types").VueTypeValidableDef<boolean>;
            filterOption: import("vue-types").VueTypeDef<any> & {
                default: any;
            };
            defaultActiveFirstOption: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            };
            dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
                default: () => unknown[];
            };
            dropdownMenuStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
            dropdownMatchSelectWidth: {
                type: (BooleanConstructor | NumberConstructor)[];
                default: boolean;
            };
            onFocus: {
                type: import("vue").PropType<(e: FocusEvent) => void>;
            };
            onBlur: {
                type: import("vue").PropType<(e: FocusEvent) => void>;
            };
            onChange: import("vue").PropType<(value: import("../select").SelectValue, option: import("../select").DefaultOptionType | import("../select").DefaultOptionType[]) => void>;
            onKeydown: import("vue").PropType<(e: KeyboardEvent) => void>;
            onKeyup: import("vue").PropType<(e: KeyboardEvent) => void>;
            onClick: import("vue").PropType<(e: MouseEvent) => void>;
            onMousedown: import("vue").PropType<(e: MouseEvent) => void>;
            onMouseenter: import("vue").PropType<(e: MouseEvent) => void>;
            onMouseleave: import("vue").PropType<(e: MouseEvent) => void>;
            onSelect: import("vue").PropType<import("../vc-select/Select").SelectHandler<import("../select").SelectValue, import("../select").DefaultOptionType>>;
            size: import("vue").PropType<import("../config-provider").SizeType>;
            direction: {
                type: import("vue").PropType<"ltr" | "rtl">;
            };
            open: {
                type: BooleanConstructor;
                default: any;
            };
            animation: StringConstructor;
            disabled: {
                type: BooleanConstructor;
                default: any;
            };
            value: {
                type: import("vue").PropType<import("../select").SelectValue>;
            };
            tabindex: NumberConstructor;
            getPopupContainer: {
                type: import("vue").PropType<import("../vc-select/BaseSelect").RenderDOMFunc>;
            };
            virtual: {
                type: BooleanConstructor;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("../select").SelectValue>;
            };
            showAction: {
                type: import("vue").PropType<("click" | "focus")[]>;
            };
            dropdownClassName: StringConstructor;
            dropdownAlign: import("vue-types").VueTypeValidableDef<any>;
            placeholder: import("vue-types").VueTypeValidableDef<any>;
            allowClear: {
                type: BooleanConstructor;
                default: any;
            };
            defaultOpen: {
                type: BooleanConstructor;
                default: any;
            };
            id: StringConstructor;
            suffixIcon: import("vue-types").VueTypeValidableDef<any>;
            clearIcon: import("vue-types").VueTypeValidableDef<any>;
            'onUpdate:value': import("vue").PropType<(val: import("../select").SelectValue) => void>;
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            options: import("vue").PropType<import("../select").DefaultOptionType[]>;
            placement: {
                type: import("vue").PropType<import("../vc-select/BaseSelect").Placement>;
            };
            children: import("vue").PropType<import("../_util/type").VueNode[]>;
            onDeselect: import("vue").PropType<import("../vc-select/Select").SelectHandler<import("../select").SelectValue, import("../select").DefaultOptionType>>;
            onSearch: import("vue").PropType<(value: string) => void>;
            notFoundContent: import("vue-types").VueTypeValidableDef<any>;
            fieldNames: import("vue").PropType<import("../vc-select/Select").FieldNames>;
            dropdownStyle: {
                type: import("vue").PropType<import("vue").CSSProperties>;
            };
            dropdownRender: {
                type: import("vue").PropType<import("../vc-select/BaseSelect").DropdownRender>;
            };
            searchValue: StringConstructor;
            onInputKeyDown: import("vue").PropType<(e: KeyboardEvent) => void>;
            removeIcon: import("vue-types").VueTypeValidableDef<any>;
            maxTagCount: {
                type: import("vue").PropType<number | "responsive">;
            };
            maxTagTextLength: NumberConstructor;
            maxTagPlaceholder: import("vue-types").VueTypeValidableDef<any>;
            tokenSeparators: {
                type: import("vue").PropType<string[]>;
            };
            tagRender: {
                type: import("vue").PropType<(props: import("../vc-select/BaseSelect").CustomTagProps) => any>;
            };
            optionLabelRender: {
                type: import("vue").PropType<(option: Record<string, any>) => any>;
            };
            onClear: import("vue").PropType<() => void>;
            onDropdownVisibleChange: {
                type: import("vue").PropType<(open: boolean) => void>;
            };
            getRawInputElement: {
                type: import("vue").PropType<() => any>;
            };
            showArrow: {
                type: BooleanConstructor;
                default: any;
            };
            onPopupScroll: import("vue").PropType<(e: UIEvent) => void>;
            menuItemSelectedIcon: import("vue-types").VueTypeValidableDef<any>;
            listHeight: NumberConstructor;
            listItemHeight: NumberConstructor;
            inputValue: StringConstructor;
            autoClearSearchValue: {
                type: BooleanConstructor;
                default: any;
            };
            filterSort: import("vue").PropType<(optionA: import("../select").DefaultOptionType, optionB: import("../select").DefaultOptionType) => number>;
            optionFilterProp: StringConstructor;
            itemIcon: import("vue-types").VueTypeValidableDef<any>;
        }>> & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            onSelect?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "open" | "disabled" | "virtual" | "dropdownMatchSelectWidth" | "transitionName" | "allowClear" | "defaultOpen" | "bordered" | "choiceTransitionName" | "showArrow" | "autoClearSearchValue" | "filterOption" | "defaultActiveFirstOption" | "dataSource">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "blur" | "change" | "focus" | "select", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            showSearch: import("vue-types").VueTypeValidableDef<boolean>;
            transitionName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            choiceTransitionName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            } & {
                default: string;
            };
            autofocus: import("vue-types").VueTypeValidableDef<boolean>;
            backfill: import("vue-types").VueTypeValidableDef<boolean>;
            filterOption: import("vue-types").VueTypeDef<any> & {
                default: any;
            };
            defaultActiveFirstOption: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            };
            dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
                default: () => unknown[];
            };
            dropdownMenuStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
            dropdownMatchSelectWidth: {
                type: (BooleanConstructor | NumberConstructor)[];
                default: boolean;
            };
            onFocus: {
                type: import("vue").PropType<(e: FocusEvent) => void>;
            };
            onBlur: {
                type: import("vue").PropType<(e: FocusEvent) => void>;
            };
            onChange: import("vue").PropType<(value: import("../select").SelectValue, option: import("../select").DefaultOptionType | import("../select").DefaultOptionType[]) => void>;
            onKeydown: import("vue").PropType<(e: KeyboardEvent) => void>;
            onKeyup: import("vue").PropType<(e: KeyboardEvent) => void>;
            onClick: import("vue").PropType<(e: MouseEvent) => void>;
            onMousedown: import("vue").PropType<(e: MouseEvent) => void>;
            onMouseenter: import("vue").PropType<(e: MouseEvent) => void>;
            onMouseleave: import("vue").PropType<(e: MouseEvent) => void>;
            onSelect: import("vue").PropType<import("../vc-select/Select").SelectHandler<import("../select").SelectValue, import("../select").DefaultOptionType>>;
            size: import("vue").PropType<import("../config-provider").SizeType>;
            direction: {
                type: import("vue").PropType<"ltr" | "rtl">;
            };
            open: {
                type: BooleanConstructor;
                default: any;
            };
            animation: StringConstructor;
            disabled: {
                type: BooleanConstructor;
                default: any;
            };
            value: {
                type: import("vue").PropType<import("../select").SelectValue>;
            };
            tabindex: NumberConstructor;
            getPopupContainer: {
                type: import("vue").PropType<import("../vc-select/BaseSelect").RenderDOMFunc>;
            };
            virtual: {
                type: BooleanConstructor;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("../select").SelectValue>;
            };
            showAction: {
                type: import("vue").PropType<("click" | "focus")[]>;
            };
            dropdownClassName: StringConstructor;
            dropdownAlign: import("vue-types").VueTypeValidableDef<any>;
            placeholder: import("vue-types").VueTypeValidableDef<any>;
            allowClear: {
                type: BooleanConstructor;
                default: any;
            };
            defaultOpen: {
                type: BooleanConstructor;
                default: any;
            };
            id: StringConstructor;
            suffixIcon: import("vue-types").VueTypeValidableDef<any>;
            clearIcon: import("vue-types").VueTypeValidableDef<any>;
            'onUpdate:value': import("vue").PropType<(val: import("../select").SelectValue) => void>;
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            options: import("vue").PropType<import("../select").DefaultOptionType[]>;
            placement: {
                type: import("vue").PropType<import("../vc-select/BaseSelect").Placement>;
            };
            children: import("vue").PropType<import("../_util/type").VueNode[]>;
            onDeselect: import("vue").PropType<import("../vc-select/Select").SelectHandler<import("../select").SelectValue, import("../select").DefaultOptionType>>;
            onSearch: import("vue").PropType<(value: string) => void>;
            notFoundContent: import("vue-types").VueTypeValidableDef<any>;
            fieldNames: import("vue").PropType<import("../vc-select/Select").FieldNames>;
            dropdownStyle: {
                type: import("vue").PropType<import("vue").CSSProperties>;
            };
            dropdownRender: {
                type: import("vue").PropType<import("../vc-select/BaseSelect").DropdownRender>;
            };
            searchValue: StringConstructor;
            onInputKeyDown: import("vue").PropType<(e: KeyboardEvent) => void>;
            removeIcon: import("vue-types").VueTypeValidableDef<any>;
            maxTagCount: {
                type: import("vue").PropType<number | "responsive">;
            };
            maxTagTextLength: NumberConstructor;
            maxTagPlaceholder: import("vue-types").VueTypeValidableDef<any>;
            tokenSeparators: {
                type: import("vue").PropType<string[]>;
            };
            tagRender: {
                type: import("vue").PropType<(props: import("../vc-select/BaseSelect").CustomTagProps) => any>;
            };
            optionLabelRender: {
                type: import("vue").PropType<(option: Record<string, any>) => any>;
            };
            onClear: import("vue").PropType<() => void>;
            onDropdownVisibleChange: {
                type: import("vue").PropType<(open: boolean) => void>;
            };
            getRawInputElement: {
                type: import("vue").PropType<() => any>;
            };
            showArrow: {
                type: BooleanConstructor;
                default: any;
            };
            onPopupScroll: import("vue").PropType<(e: UIEvent) => void>;
            menuItemSelectedIcon: import("vue-types").VueTypeValidableDef<any>;
            listHeight: NumberConstructor;
            listItemHeight: NumberConstructor;
            inputValue: StringConstructor;
            autoClearSearchValue: {
                type: BooleanConstructor;
                default: any;
            };
            filterSort: import("vue").PropType<(optionA: import("../select").DefaultOptionType, optionB: import("../select").DefaultOptionType) => number>;
            optionFilterProp: StringConstructor;
            itemIcon: import("vue-types").VueTypeValidableDef<any>;
        }>> & {
            onFocus?: (...args: any[]) => any;
            onBlur?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            onSelect?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "select")[], string, {
            prefixCls: string;
            open: boolean;
            disabled: boolean;
            virtual: boolean;
            dropdownMatchSelectWidth: number | boolean;
            transitionName: string;
            allowClear: boolean;
            defaultOpen: boolean;
            bordered: boolean;
            choiceTransitionName: string;
            showArrow: boolean;
            autoClearSearchValue: boolean;
            filterOption: any;
            defaultActiveFirstOption: boolean;
            dataSource: unknown[];
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        showSearch: import("vue-types").VueTypeValidableDef<boolean>;
        transitionName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        choiceTransitionName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        } & {
            default: string;
        };
        autofocus: import("vue-types").VueTypeValidableDef<boolean>;
        backfill: import("vue-types").VueTypeValidableDef<boolean>;
        filterOption: import("vue-types").VueTypeDef<any> & {
            default: any;
        };
        defaultActiveFirstOption: import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        };
        dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
            default: () => unknown[];
        };
        dropdownMenuStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
        dropdownMatchSelectWidth: {
            type: (BooleanConstructor | NumberConstructor)[];
            default: boolean;
        };
        onFocus: {
            type: import("vue").PropType<(e: FocusEvent) => void>;
        };
        onBlur: {
            type: import("vue").PropType<(e: FocusEvent) => void>;
        };
        onChange: import("vue").PropType<(value: import("../select").SelectValue, option: import("../select").DefaultOptionType | import("../select").DefaultOptionType[]) => void>;
        onKeydown: import("vue").PropType<(e: KeyboardEvent) => void>;
        onKeyup: import("vue").PropType<(e: KeyboardEvent) => void>;
        onClick: import("vue").PropType<(e: MouseEvent) => void>;
        onMousedown: import("vue").PropType<(e: MouseEvent) => void>;
        onMouseenter: import("vue").PropType<(e: MouseEvent) => void>;
        onMouseleave: import("vue").PropType<(e: MouseEvent) => void>;
        onSelect: import("vue").PropType<import("../vc-select/Select").SelectHandler<import("../select").SelectValue, import("../select").DefaultOptionType>>;
        size: import("vue").PropType<import("../config-provider").SizeType>;
        direction: {
            type: import("vue").PropType<"ltr" | "rtl">;
        };
        open: {
            type: BooleanConstructor;
            default: any;
        };
        animation: StringConstructor;
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        value: {
            type: import("vue").PropType<import("../select").SelectValue>;
        };
        tabindex: NumberConstructor;
        getPopupContainer: {
            type: import("vue").PropType<import("../vc-select/BaseSelect").RenderDOMFunc>;
        };
        virtual: {
            type: BooleanConstructor;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("../select").SelectValue>;
        };
        showAction: {
            type: import("vue").PropType<("click" | "focus")[]>;
        };
        dropdownClassName: StringConstructor;
        dropdownAlign: import("vue-types").VueTypeValidableDef<any>;
        placeholder: import("vue-types").VueTypeValidableDef<any>;
        allowClear: {
            type: BooleanConstructor;
            default: any;
        };
        defaultOpen: {
            type: BooleanConstructor;
            default: any;
        };
        id: StringConstructor;
        suffixIcon: import("vue-types").VueTypeValidableDef<any>;
        clearIcon: import("vue-types").VueTypeValidableDef<any>;
        'onUpdate:value': import("vue").PropType<(val: import("../select").SelectValue) => void>;
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        options: import("vue").PropType<import("../select").DefaultOptionType[]>;
        placement: {
            type: import("vue").PropType<import("../vc-select/BaseSelect").Placement>;
        };
        children: import("vue").PropType<import("../_util/type").VueNode[]>;
        onDeselect: import("vue").PropType<import("../vc-select/Select").SelectHandler<import("../select").SelectValue, import("../select").DefaultOptionType>>;
        onSearch: import("vue").PropType<(value: string) => void>;
        notFoundContent: import("vue-types").VueTypeValidableDef<any>;
        fieldNames: import("vue").PropType<import("../vc-select/Select").FieldNames>;
        dropdownStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        dropdownRender: {
            type: import("vue").PropType<import("../vc-select/BaseSelect").DropdownRender>;
        };
        searchValue: StringConstructor;
        onInputKeyDown: import("vue").PropType<(e: KeyboardEvent) => void>;
        removeIcon: import("vue-types").VueTypeValidableDef<any>;
        maxTagCount: {
            type: import("vue").PropType<number | "responsive">;
        };
        maxTagTextLength: NumberConstructor;
        maxTagPlaceholder: import("vue-types").VueTypeValidableDef<any>;
        tokenSeparators: {
            type: import("vue").PropType<string[]>;
        };
        tagRender: {
            type: import("vue").PropType<(props: import("../vc-select/BaseSelect").CustomTagProps) => any>;
        };
        optionLabelRender: {
            type: import("vue").PropType<(option: Record<string, any>) => any>;
        };
        onClear: import("vue").PropType<() => void>;
        onDropdownVisibleChange: {
            type: import("vue").PropType<(open: boolean) => void>;
        };
        getRawInputElement: {
            type: import("vue").PropType<() => any>;
        };
        showArrow: {
            type: BooleanConstructor;
            default: any;
        };
        onPopupScroll: import("vue").PropType<(e: UIEvent) => void>;
        menuItemSelectedIcon: import("vue-types").VueTypeValidableDef<any>;
        listHeight: NumberConstructor;
        listItemHeight: NumberConstructor;
        inputValue: StringConstructor;
        autoClearSearchValue: {
            type: BooleanConstructor;
            default: any;
        };
        filterSort: import("vue").PropType<(optionA: import("../select").DefaultOptionType, optionB: import("../select").DefaultOptionType) => number>;
        optionFilterProp: StringConstructor;
        itemIcon: import("vue-types").VueTypeValidableDef<any>;
    }>> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        onSelect?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showSearch: import("vue-types").VueTypeValidableDef<boolean>;
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    choiceTransitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    backfill: import("vue-types").VueTypeValidableDef<boolean>;
    filterOption: import("vue-types").VueTypeDef<any> & {
        default: any;
    };
    defaultActiveFirstOption: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    dropdownMenuStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    dropdownMatchSelectWidth: {
        type: (BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e: FocusEvent) => void>;
    };
    onBlur: {
        type: import("vue").PropType<(e: FocusEvent) => void>;
    };
    onChange: import("vue").PropType<(value: import("../select").SelectValue, option: import("../select").DefaultOptionType | import("../select").DefaultOptionType[]) => void>;
    onKeydown: import("vue").PropType<(e: KeyboardEvent) => void>;
    onKeyup: import("vue").PropType<(e: KeyboardEvent) => void>;
    onClick: import("vue").PropType<(e: MouseEvent) => void>;
    onMousedown: import("vue").PropType<(e: MouseEvent) => void>;
    onMouseenter: import("vue").PropType<(e: MouseEvent) => void>;
    onMouseleave: import("vue").PropType<(e: MouseEvent) => void>;
    onSelect: import("vue").PropType<import("../vc-select/Select").SelectHandler<import("../select").SelectValue, import("../select").DefaultOptionType>>;
    size: import("vue").PropType<import("../config-provider").SizeType>;
    direction: {
        type: import("vue").PropType<"ltr" | "rtl">;
    };
    open: {
        type: BooleanConstructor;
        default: any;
    };
    animation: StringConstructor;
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    value: {
        type: import("vue").PropType<import("../select").SelectValue>;
    };
    tabindex: NumberConstructor;
    getPopupContainer: {
        type: import("vue").PropType<import("../vc-select/BaseSelect").RenderDOMFunc>;
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("../select").SelectValue>;
    };
    showAction: {
        type: import("vue").PropType<("click" | "focus")[]>;
    };
    dropdownClassName: StringConstructor;
    dropdownAlign: import("vue-types").VueTypeValidableDef<any>;
    placeholder: import("vue-types").VueTypeValidableDef<any>;
    allowClear: {
        type: BooleanConstructor;
        default: any;
    };
    defaultOpen: {
        type: BooleanConstructor;
        default: any;
    };
    id: StringConstructor;
    suffixIcon: import("vue-types").VueTypeValidableDef<any>;
    clearIcon: import("vue-types").VueTypeValidableDef<any>;
    'onUpdate:value': import("vue").PropType<(val: import("../select").SelectValue) => void>;
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: import("vue").PropType<import("../select").DefaultOptionType[]>;
    placement: {
        type: import("vue").PropType<import("../vc-select/BaseSelect").Placement>;
    };
    children: import("vue").PropType<import("../_util/type").VueNode[]>;
    onDeselect: import("vue").PropType<import("../vc-select/Select").SelectHandler<import("../select").SelectValue, import("../select").DefaultOptionType>>;
    onSearch: import("vue").PropType<(value: string) => void>;
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    fieldNames: import("vue").PropType<import("../vc-select/Select").FieldNames>;
    dropdownStyle: {
        type: import("vue").PropType<import("vue").CSSProperties>;
    };
    dropdownRender: {
        type: import("vue").PropType<import("../vc-select/BaseSelect").DropdownRender>;
    };
    searchValue: StringConstructor;
    onInputKeyDown: import("vue").PropType<(e: KeyboardEvent) => void>;
    removeIcon: import("vue-types").VueTypeValidableDef<any>;
    maxTagCount: {
        type: import("vue").PropType<number | "responsive">;
    };
    maxTagTextLength: NumberConstructor;
    maxTagPlaceholder: import("vue-types").VueTypeValidableDef<any>;
    tokenSeparators: {
        type: import("vue").PropType<string[]>;
    };
    tagRender: {
        type: import("vue").PropType<(props: import("../vc-select/BaseSelect").CustomTagProps) => any>;
    };
    optionLabelRender: {
        type: import("vue").PropType<(option: Record<string, any>) => any>;
    };
    onClear: import("vue").PropType<() => void>;
    onDropdownVisibleChange: {
        type: import("vue").PropType<(open: boolean) => void>;
    };
    getRawInputElement: {
        type: import("vue").PropType<() => any>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: any;
    };
    onPopupScroll: import("vue").PropType<(e: UIEvent) => void>;
    menuItemSelectedIcon: import("vue-types").VueTypeValidableDef<any>;
    listHeight: NumberConstructor;
    listItemHeight: NumberConstructor;
    inputValue: StringConstructor;
    autoClearSearchValue: {
        type: BooleanConstructor;
        default: any;
    };
    filterSort: import("vue").PropType<(optionA: import("../select").DefaultOptionType, optionB: import("../select").DefaultOptionType) => number>;
    optionFilterProp: StringConstructor;
    itemIcon: import("vue-types").VueTypeValidableDef<any>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onSelect?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "select")[], "select" | "blur" | "change" | "focus", {
    prefixCls: string;
    open: boolean;
    disabled: boolean;
    virtual: boolean;
    dropdownMatchSelectWidth: number | boolean;
    transitionName: string;
    allowClear: boolean;
    defaultOpen: boolean;
    bordered: boolean;
    choiceTransitionName: string;
    showArrow: boolean;
    autoClearSearchValue: boolean;
    filterOption: any;
    defaultActiveFirstOption: boolean;
    dataSource: unknown[];
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Option: typeof Option;
    readonly OptGroup: typeof OptGroup;
};
export default _default;
