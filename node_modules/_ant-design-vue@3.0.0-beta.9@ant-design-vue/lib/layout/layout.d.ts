import type { ExtractPropTypes, HTMLAttributes } from 'vue';
export declare const basicProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    hasSider: import("vue-types").VueTypeValidableDef<boolean>;
    tagName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
};
export declare type BasicProps = Partial<ExtractPropTypes<typeof basicProps>> & HTMLAttributes;
declare const Layout: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    hasSider: import("vue-types").VueTypeValidableDef<boolean>;
    tagName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    hasSider: import("vue-types").VueTypeValidableDef<boolean>;
    tagName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}>>, {
    prefixCls: string;
    tagName: string;
}>;
declare const Header: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    hasSider: import("vue-types").VueTypeValidableDef<boolean>;
    tagName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    hasSider: import("vue-types").VueTypeValidableDef<boolean>;
    tagName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}>>, {
    prefixCls: string;
    tagName: string;
}>;
declare const Footer: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    hasSider: import("vue-types").VueTypeValidableDef<boolean>;
    tagName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    hasSider: import("vue-types").VueTypeValidableDef<boolean>;
    tagName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}>>, {
    prefixCls: string;
    tagName: string;
}>;
declare const Content: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    hasSider: import("vue-types").VueTypeValidableDef<boolean>;
    tagName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    hasSider: import("vue-types").VueTypeValidableDef<boolean>;
    tagName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}>>, {
    prefixCls: string;
    tagName: string;
}>;
export { Header, Footer, Content };
export default Layout;
