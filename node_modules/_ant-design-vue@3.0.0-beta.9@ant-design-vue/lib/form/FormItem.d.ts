import type { PropType, ExtractPropTypes, ComputedRef, Ref, ComponentPublicInstance } from 'vue';
import type { InternalNamePath, RuleError, ValidateOptions } from './interface';
import type { ValidationRule } from './Form';
declare const ValidateStatuses: ["success", "warning", "error", "validating", ""];
export declare type ValidateStatus = typeof ValidateStatuses[number];
export interface FieldExpose {
    fieldValue: Ref<any>;
    fieldId: ComputedRef<any>;
    fieldName: ComputedRef<any>;
    resetField: () => void;
    clearValidate: () => void;
    namePath: ComputedRef<InternalNamePath>;
    rules?: ComputedRef<ValidationRule[]>;
    validateRules: (options: ValidateOptions) => Promise<void> | Promise<RuleError[]>;
}
export declare const formItemProps: {
    htmlFor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    label: import("vue-types").VueTypeValidableDef<any>;
    help: import("vue-types").VueTypeValidableDef<any>;
    extra: import("vue-types").VueTypeValidableDef<any>;
    labelCol: {
        type: PropType<Partial<ExtractPropTypes<{
            span: import("vue-types").VueTypeDef<string | number>;
            order: import("vue-types").VueTypeDef<string | number>;
            offset: import("vue-types").VueTypeDef<string | number>;
            push: import("vue-types").VueTypeDef<string | number>;
            pull: import("vue-types").VueTypeDef<string | number>;
            xs: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            sm: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            md: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            lg: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            flex: import("vue-types").VueTypeDef<string | number>;
        }>>>;
    };
    wrapperCol: {
        type: PropType<Partial<ExtractPropTypes<{
            span: import("vue-types").VueTypeDef<string | number>;
            order: import("vue-types").VueTypeDef<string | number>;
            offset: import("vue-types").VueTypeDef<string | number>;
            push: import("vue-types").VueTypeDef<string | number>;
            pull: import("vue-types").VueTypeDef<string | number>;
            xs: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            sm: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            md: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            lg: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            flex: import("vue-types").VueTypeDef<string | number>;
        }>>>;
    };
    hasFeedback: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    colon: import("vue-types").VueTypeValidableDef<boolean>;
    labelAlign: import("vue-types").VueTypeDef<"left" | "right">;
    prop: {
        type: PropType<string | number | (string | number)[]>;
    };
    name: {
        type: PropType<string | number | (string | number)[]>;
    };
    rules: import("vue-types").VueTypeDef<unknown[] | {
        [key: string]: any;
    }>;
    autoLink: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    required: import("vue-types").VueTypeValidableDef<boolean>;
    validateFirst: import("vue-types").VueTypeValidableDef<boolean>;
    validateStatus: import("vue-types").VueTypeDef<"" | "error" | "validating" | "success" | "warning">;
    validateTrigger: {
        type: PropType<string | string[]>;
    };
    messageVariables: {
        type: PropType<Record<string, string>>;
    };
    hidden: BooleanConstructor;
    noStyle: BooleanConstructor;
};
export declare type FormItemProps = Partial<ExtractPropTypes<typeof formItemProps>>;
export declare type FormItemExpose = {
    onFieldBlur: () => void;
    onFieldChange: () => void;
    clearValidate: () => void;
    resetField: () => void;
};
export declare type FormItemInstance = ComponentPublicInstance<FormItemProps, FormItemExpose>;
declare const _default: import("vue").DefineComponent<{
    htmlFor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    label: import("vue-types").VueTypeValidableDef<any>;
    help: import("vue-types").VueTypeValidableDef<any>;
    extra: import("vue-types").VueTypeValidableDef<any>;
    labelCol: {
        type: PropType<Partial<ExtractPropTypes<{
            span: import("vue-types").VueTypeDef<string | number>;
            order: import("vue-types").VueTypeDef<string | number>;
            offset: import("vue-types").VueTypeDef<string | number>;
            push: import("vue-types").VueTypeDef<string | number>;
            pull: import("vue-types").VueTypeDef<string | number>;
            xs: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            sm: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            md: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            lg: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            flex: import("vue-types").VueTypeDef<string | number>;
        }>>>;
    };
    wrapperCol: {
        type: PropType<Partial<ExtractPropTypes<{
            span: import("vue-types").VueTypeDef<string | number>;
            order: import("vue-types").VueTypeDef<string | number>;
            offset: import("vue-types").VueTypeDef<string | number>;
            push: import("vue-types").VueTypeDef<string | number>;
            pull: import("vue-types").VueTypeDef<string | number>;
            xs: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            sm: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            md: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            lg: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            flex: import("vue-types").VueTypeDef<string | number>;
        }>>>;
    };
    hasFeedback: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    colon: import("vue-types").VueTypeValidableDef<boolean>;
    labelAlign: import("vue-types").VueTypeDef<"left" | "right">;
    prop: {
        type: PropType<string | number | (string | number)[]>;
    };
    name: {
        type: PropType<string | number | (string | number)[]>;
    };
    rules: import("vue-types").VueTypeDef<unknown[] | {
        [key: string]: any;
    }>;
    autoLink: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    required: import("vue-types").VueTypeValidableDef<boolean>;
    validateFirst: import("vue-types").VueTypeValidableDef<boolean>;
    validateStatus: import("vue-types").VueTypeDef<"" | "error" | "validating" | "success" | "warning">;
    validateTrigger: {
        type: PropType<string | string[]>;
    };
    messageVariables: {
        type: PropType<Record<string, string>>;
    };
    hidden: BooleanConstructor;
    noStyle: BooleanConstructor;
}, () => JSX.Element | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[], unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    htmlFor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    label: import("vue-types").VueTypeValidableDef<any>;
    help: import("vue-types").VueTypeValidableDef<any>;
    extra: import("vue-types").VueTypeValidableDef<any>;
    labelCol: {
        type: PropType<Partial<ExtractPropTypes<{
            span: import("vue-types").VueTypeDef<string | number>;
            order: import("vue-types").VueTypeDef<string | number>;
            offset: import("vue-types").VueTypeDef<string | number>;
            push: import("vue-types").VueTypeDef<string | number>;
            pull: import("vue-types").VueTypeDef<string | number>;
            xs: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            sm: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            md: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            lg: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            flex: import("vue-types").VueTypeDef<string | number>;
        }>>>;
    };
    wrapperCol: {
        type: PropType<Partial<ExtractPropTypes<{
            span: import("vue-types").VueTypeDef<string | number>;
            order: import("vue-types").VueTypeDef<string | number>;
            offset: import("vue-types").VueTypeDef<string | number>;
            push: import("vue-types").VueTypeDef<string | number>;
            pull: import("vue-types").VueTypeDef<string | number>;
            xs: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            sm: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            md: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            lg: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            xxxl: import("vue-types").VueTypeDef<string | number | import("../grid/Col").ColSize>;
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            flex: import("vue-types").VueTypeDef<string | number>;
        }>>>;
    };
    hasFeedback: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    colon: import("vue-types").VueTypeValidableDef<boolean>;
    labelAlign: import("vue-types").VueTypeDef<"left" | "right">;
    prop: {
        type: PropType<string | number | (string | number)[]>;
    };
    name: {
        type: PropType<string | number | (string | number)[]>;
    };
    rules: import("vue-types").VueTypeDef<unknown[] | {
        [key: string]: any;
    }>;
    autoLink: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    required: import("vue-types").VueTypeValidableDef<boolean>;
    validateFirst: import("vue-types").VueTypeValidableDef<boolean>;
    validateStatus: import("vue-types").VueTypeDef<"" | "error" | "validating" | "success" | "warning">;
    validateTrigger: {
        type: PropType<string | string[]>;
    };
    messageVariables: {
        type: PropType<Record<string, string>>;
    };
    hidden: BooleanConstructor;
    noStyle: BooleanConstructor;
}>>, {
    hidden: boolean;
    prefixCls: string;
    htmlFor: string;
    hasFeedback: boolean;
    autoLink: boolean;
    noStyle: boolean;
}>;
export default _default;
