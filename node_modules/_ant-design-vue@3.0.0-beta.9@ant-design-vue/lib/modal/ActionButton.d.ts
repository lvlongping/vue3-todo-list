import type { ExtractPropTypes, PropType } from 'vue';
import type { LegacyButtonType } from '../button/buttonTypes';
declare const actionButtonProps: {
    type: {
        type: PropType<LegacyButtonType>;
    };
    actionFn: PropType<(...args: any[]) => any | PromiseLike<any>>;
    close: FunctionConstructor;
    autofocus: BooleanConstructor;
    prefixCls: StringConstructor;
    buttonProps: PropType<Partial<ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        type: import("vue-types").VueTypeDef<"default" | "link" | "text" | "dashed" | "ghost" | "primary">;
        htmlType: import("vue-types").VueTypeDef<"submit" | "button" | "reset"> & {
            default: "submit" | "button" | "reset";
        };
        shape: import("vue-types").VueTypeDef<"circle" | "round">;
        size: {
            type: PropType<import("../config-provider").SizeType>;
        };
        loading: {
            type: PropType<boolean | {
                delay?: number;
            }>;
            default: () => boolean | {
                delay?: number;
            };
        };
        disabled: import("vue-types").VueTypeValidableDef<boolean>;
        ghost: import("vue-types").VueTypeValidableDef<boolean>;
        block: import("vue-types").VueTypeValidableDef<boolean>;
        danger: import("vue-types").VueTypeValidableDef<boolean>;
        icon: import("vue-types").VueTypeValidableDef<any>;
        href: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        target: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        title: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        onClick: {
            type: PropType<(event: MouseEvent) => void>;
        };
    }>>>;
    emitEvent: BooleanConstructor;
    quitOnNullishReturnValue: BooleanConstructor;
};
export declare type ActionButtonProps = ExtractPropTypes<typeof actionButtonProps>;
declare const _default: import("vue").DefineComponent<{
    type: {
        type: PropType<LegacyButtonType>;
    };
    actionFn: PropType<(...args: any[]) => any>;
    close: FunctionConstructor;
    autofocus: BooleanConstructor;
    prefixCls: StringConstructor;
    buttonProps: PropType<Partial<ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        type: import("vue-types").VueTypeDef<"default" | "link" | "text" | "dashed" | "ghost" | "primary">;
        htmlType: import("vue-types").VueTypeDef<"submit" | "button" | "reset"> & {
            default: "submit" | "button" | "reset";
        };
        shape: import("vue-types").VueTypeDef<"circle" | "round">;
        size: {
            type: PropType<import("../config-provider").SizeType>;
        };
        loading: {
            type: PropType<boolean | {
                delay?: number;
            }>;
            default: () => boolean | {
                delay?: number;
            };
        };
        disabled: import("vue-types").VueTypeValidableDef<boolean>;
        ghost: import("vue-types").VueTypeValidableDef<boolean>;
        block: import("vue-types").VueTypeValidableDef<boolean>;
        danger: import("vue-types").VueTypeValidableDef<boolean>;
        icon: import("vue-types").VueTypeValidableDef<any>;
        href: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        target: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        title: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        onClick: {
            type: PropType<(event: MouseEvent) => void>;
        };
    }>>>;
    emitEvent: BooleanConstructor;
    quitOnNullishReturnValue: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    type: {
        type: PropType<LegacyButtonType>;
    };
    actionFn: PropType<(...args: any[]) => any>;
    close: FunctionConstructor;
    autofocus: BooleanConstructor;
    prefixCls: StringConstructor;
    buttonProps: PropType<Partial<ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        type: import("vue-types").VueTypeDef<"default" | "link" | "text" | "dashed" | "ghost" | "primary">;
        htmlType: import("vue-types").VueTypeDef<"submit" | "button" | "reset"> & {
            default: "submit" | "button" | "reset";
        };
        shape: import("vue-types").VueTypeDef<"circle" | "round">;
        size: {
            type: PropType<import("../config-provider").SizeType>;
        };
        loading: {
            type: PropType<boolean | {
                delay?: number;
            }>;
            default: () => boolean | {
                delay?: number;
            };
        };
        disabled: import("vue-types").VueTypeValidableDef<boolean>;
        ghost: import("vue-types").VueTypeValidableDef<boolean>;
        block: import("vue-types").VueTypeValidableDef<boolean>;
        danger: import("vue-types").VueTypeValidableDef<boolean>;
        icon: import("vue-types").VueTypeValidableDef<any>;
        href: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        target: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        title: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        onClick: {
            type: PropType<(event: MouseEvent) => void>;
        };
    }>>>;
    emitEvent: BooleanConstructor;
    quitOnNullishReturnValue: BooleanConstructor;
}>>, {
    autofocus: boolean;
    emitEvent: boolean;
    quitOnNullishReturnValue: boolean;
}>;
export default _default;
