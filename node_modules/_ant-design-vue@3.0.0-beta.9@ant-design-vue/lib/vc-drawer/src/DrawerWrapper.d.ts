declare const DrawerWrapper: import("vue").DefineComponent<{
    forceRender: import("vue-types").VueTypeValidableDef<boolean>;
    getContainer: import("vue-types").VueTypeDef<any>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    width: import("vue-types").VueTypeDef<string | number>;
    height: import("vue-types").VueTypeDef<string | number>;
    style: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    class: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: {
        type: import("vue").PropType<import("./IDrawerPropTypes").IPlacement>;
    };
    wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    level: {
        type: import("vue").PropType<string | string[]>;
    };
    levelMove: {
        type: import("vue").PropType<(number | [number, number]) | ((e: {
            target: HTMLElement;
            open: boolean;
        }) => number | [number, number])>;
    };
    duration: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    ease: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showMask: import("vue-types").VueTypeValidableDef<boolean>;
    maskClosable: import("vue-types").VueTypeValidableDef<boolean>;
    maskStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    afterVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    keyboard: import("vue-types").VueTypeValidableDef<boolean>;
    contentWrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    open: import("vue-types").VueTypeValidableDef<boolean>;
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "handleClick")[], "close" | "handleClick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    forceRender: import("vue-types").VueTypeValidableDef<boolean>;
    getContainer: import("vue-types").VueTypeDef<any>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    width: import("vue-types").VueTypeDef<string | number>;
    height: import("vue-types").VueTypeDef<string | number>;
    style: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    class: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: {
        type: import("vue").PropType<import("./IDrawerPropTypes").IPlacement>;
    };
    wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    level: {
        type: import("vue").PropType<string | string[]>;
    };
    levelMove: {
        type: import("vue").PropType<(number | [number, number]) | ((e: {
            target: HTMLElement;
            open: boolean;
        }) => number | [number, number])>;
    };
    duration: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    ease: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showMask: import("vue-types").VueTypeValidableDef<boolean>;
    maskClosable: import("vue-types").VueTypeValidableDef<boolean>;
    maskStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    afterVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    keyboard: import("vue-types").VueTypeValidableDef<boolean>;
    contentWrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    open: import("vue-types").VueTypeValidableDef<boolean>;
}>> & {
    onClose?: (...args: any[]) => any;
    onHandleClick?: (...args: any[]) => any;
}, {
    class: string;
    prefixCls: string;
    ease: string;
    duration: string;
    afterVisibleChange: (...args: any[]) => any;
    wrapperClassName: string;
}>;
export default DrawerWrapper;
