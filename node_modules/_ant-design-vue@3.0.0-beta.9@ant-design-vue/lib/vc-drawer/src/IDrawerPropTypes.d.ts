import type { PropType } from 'vue';
export declare type IPlacement = 'left' | 'top' | 'right' | 'bottom';
declare type ILevelMove = number | [number, number];
declare const drawerProps: () => {
    forceRender: import("vue-types").VueTypeValidableDef<boolean>;
    getContainer: import("vue-types").VueTypeDef<any>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    width: import("vue-types").VueTypeDef<string | number>;
    height: import("vue-types").VueTypeDef<string | number>;
    style: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    class: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: {
        type: PropType<IPlacement>;
    };
    wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    level: {
        type: PropType<string | string[]>;
    };
    levelMove: {
        type: PropType<ILevelMove | ((e: {
            target: HTMLElement;
            open: boolean;
        }) => ILevelMove)>;
    };
    duration: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    ease: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showMask: import("vue-types").VueTypeValidableDef<boolean>;
    maskClosable: import("vue-types").VueTypeValidableDef<boolean>;
    maskStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    afterVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    keyboard: import("vue-types").VueTypeValidableDef<boolean>;
    contentWrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    open: import("vue-types").VueTypeValidableDef<boolean>;
};
declare const drawerChildProps: () => {
    getContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    getOpenCount: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    scrollLocker: import("vue-types").VueTypeValidableDef<any>;
    switchScrollingEffect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    width: import("vue-types").VueTypeDef<string | number>;
    height: import("vue-types").VueTypeDef<string | number>;
    style: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    class: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: {
        type: PropType<IPlacement>;
    };
    wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    level: {
        type: PropType<string | string[]>;
    };
    levelMove: {
        type: PropType<ILevelMove | ((e: {
            target: HTMLElement;
            open: boolean;
        }) => ILevelMove)>;
    };
    duration: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    ease: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showMask: import("vue-types").VueTypeValidableDef<boolean>;
    maskClosable: import("vue-types").VueTypeValidableDef<boolean>;
    maskStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    afterVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    keyboard: import("vue-types").VueTypeValidableDef<boolean>;
    contentWrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    open: import("vue-types").VueTypeValidableDef<boolean>;
};
export { drawerProps, drawerChildProps };
