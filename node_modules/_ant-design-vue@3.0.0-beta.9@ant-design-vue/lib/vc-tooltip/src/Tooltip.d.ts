declare const _default: import("vue").DefineComponent<{
    trigger: import("vue-types").VueTypeValidableDef<any> & {
        default: any;
    };
    defaultVisible: import("vue-types").VueTypeValidableDef<boolean>;
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    placement: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    animation: import("vue-types").VueTypeValidableDef<any>;
    afterVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    } & {
        default: (...args: any[]) => any;
    };
    overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    getTooltipContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    destroyTooltipOnHide: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    align: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    arrowContent: import("vue-types").VueTypeValidableDef<any> & {
        default: any;
    };
    tipId: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    builtinPlacements: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    overlayInnerStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    popupVisible: import("vue-types").VueTypeValidableDef<boolean>;
    onVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onPopupAlign: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    trigger: import("vue-types").VueTypeValidableDef<any> & {
        default: any;
    };
    defaultVisible: import("vue-types").VueTypeValidableDef<boolean>;
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    placement: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    animation: import("vue-types").VueTypeValidableDef<any>;
    afterVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    } & {
        default: (...args: any[]) => any;
    };
    overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    getTooltipContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    destroyTooltipOnHide: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    align: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    arrowContent: import("vue-types").VueTypeValidableDef<any> & {
        default: any;
    };
    tipId: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    builtinPlacements: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    overlayInnerStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    popupVisible: import("vue-types").VueTypeValidableDef<boolean>;
    onVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onPopupAlign: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}>>, {
    prefixCls: string;
    align: {
        [key: string]: any;
    };
    trigger: any;
    transitionName: string;
    builtinPlacements: {
        [key: string]: any;
    };
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    arrowContent: any;
    placement: string;
    afterVisibleChange: (...args: any[]) => any;
    overlayClassName: string;
    getTooltipContainer: (...args: any[]) => any;
    destroyTooltipOnHide: boolean;
    tipId: string;
    onVisibleChange: (...args: any[]) => any;
    onPopupAlign: (...args: any[]) => any;
}>;
export default _default;
