import type { Plugin } from 'vue';
import { collapseProps } from './Collapse';
import CollapsePanel, { collapsePanelProps } from './CollapsePanel';
export type { CollapseProps } from './Collapse';
export type { CollapsePanelProps } from './CollapsePanel';
export { CollapsePanel, collapseProps, collapsePanelProps };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            expandIcon: (...args: any[]) => any;
            openAnimation: {
                [key: string]: any;
            };
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            activeKey: {
                type: import("vue").PropType<import("./commonProps").ActiveKeyType>;
            };
            defaultActiveKey: {
                type: import("vue").PropType<import("./commonProps").ActiveKeyType>;
            };
            accordion: import("vue-types").VueTypeValidableDef<boolean>;
            destroyInactivePanel: import("vue-types").VueTypeValidableDef<boolean>;
            bordered: import("vue-types").VueTypeValidableDef<boolean>;
            expandIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            openAnimation: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            };
            expandIconPosition: import("vue-types").VueTypeDef<"left" | "right">;
            collapsible: {
                type: import("vue").PropType<import("./commonProps").CollapsibleType>;
            };
            ghost: import("vue-types").VueTypeValidableDef<boolean>;
        }>> & {
            onChange?: (...args: any[]) => any;
            "onUpdate:activeKey"?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "expandIcon" | "openAnimation">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "update:activeKey", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            activeKey: {
                type: import("vue").PropType<import("./commonProps").ActiveKeyType>;
            };
            defaultActiveKey: {
                type: import("vue").PropType<import("./commonProps").ActiveKeyType>;
            };
            accordion: import("vue-types").VueTypeValidableDef<boolean>;
            destroyInactivePanel: import("vue-types").VueTypeValidableDef<boolean>;
            bordered: import("vue-types").VueTypeValidableDef<boolean>;
            expandIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            openAnimation: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            };
            expandIconPosition: import("vue-types").VueTypeDef<"left" | "right">;
            collapsible: {
                type: import("vue").PropType<import("./commonProps").CollapsibleType>;
            };
            ghost: import("vue-types").VueTypeValidableDef<boolean>;
        }>> & {
            onChange?: (...args: any[]) => any;
            "onUpdate:activeKey"?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:activeKey")[], string, {
            prefixCls: string;
            expandIcon: (...args: any[]) => any;
            openAnimation: {
                [key: string]: any;
            };
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        activeKey: {
            type: import("vue").PropType<import("./commonProps").ActiveKeyType>;
        };
        defaultActiveKey: {
            type: import("vue").PropType<import("./commonProps").ActiveKeyType>;
        };
        accordion: import("vue-types").VueTypeValidableDef<boolean>;
        destroyInactivePanel: import("vue-types").VueTypeValidableDef<boolean>;
        bordered: import("vue-types").VueTypeValidableDef<boolean>;
        expandIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        openAnimation: import("vue-types").VueTypeValidableDef<{
            [key: string]: any;
        }> & {
            default: () => {
                [key: string]: any;
            };
        };
        expandIconPosition: import("vue-types").VueTypeDef<"left" | "right">;
        collapsible: {
            type: import("vue").PropType<import("./commonProps").CollapsibleType>;
        };
        ghost: import("vue-types").VueTypeValidableDef<boolean>;
    }>> & {
        onChange?: (...args: any[]) => any;
        "onUpdate:activeKey"?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    activeKey: {
        type: import("vue").PropType<import("./commonProps").ActiveKeyType>;
    };
    defaultActiveKey: {
        type: import("vue").PropType<import("./commonProps").ActiveKeyType>;
    };
    accordion: import("vue-types").VueTypeValidableDef<boolean>;
    destroyInactivePanel: import("vue-types").VueTypeValidableDef<boolean>;
    bordered: import("vue-types").VueTypeValidableDef<boolean>;
    expandIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    openAnimation: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    expandIconPosition: import("vue-types").VueTypeDef<"left" | "right">;
    collapsible: {
        type: import("vue").PropType<import("./commonProps").CollapsibleType>;
    };
    ghost: import("vue-types").VueTypeValidableDef<boolean>;
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:activeKey"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:activeKey")[], "change" | "update:activeKey", {
    prefixCls: string;
    expandIcon: (...args: any[]) => any;
    openAnimation: {
        [key: string]: any;
    };
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Panel: typeof CollapsePanel;
};
export default _default;
