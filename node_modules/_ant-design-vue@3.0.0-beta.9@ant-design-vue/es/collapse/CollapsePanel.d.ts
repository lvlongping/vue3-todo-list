import { collapsePanelProps } from './commonProps';
import type { ExtractPropTypes } from 'vue';
export { collapsePanelProps };
export declare type CollapsePanelProps = Partial<ExtractPropTypes<ReturnType<typeof collapsePanelProps>>>;
declare const _default: import("vue").DefineComponent<{
    openAnimation: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    header: import("vue-types").VueTypeValidableDef<any>;
    headerClass: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showArrow: import("vue-types").VueTypeValidableDef<boolean>;
    isActive: import("vue-types").VueTypeValidableDef<boolean>;
    destroyInactivePanel: import("vue-types").VueTypeValidableDef<boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    accordion: import("vue-types").VueTypeValidableDef<boolean>;
    forceRender: import("vue-types").VueTypeValidableDef<boolean>;
    expandIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    extra: import("vue-types").VueTypeValidableDef<any>;
    panelKey: import("vue-types").VueTypeDef<string | number>;
    collapsible: {
        type: import("vue").PropType<import("./commonProps").CollapsibleType>;
    };
    role: StringConstructor;
    onItemClick: {
        type: import("vue").PropType<(panelKey: string | number) => void>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "itemClick"[], "itemClick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    openAnimation: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    header: import("vue-types").VueTypeValidableDef<any>;
    headerClass: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    showArrow: import("vue-types").VueTypeValidableDef<boolean>;
    isActive: import("vue-types").VueTypeValidableDef<boolean>;
    destroyInactivePanel: import("vue-types").VueTypeValidableDef<boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    accordion: import("vue-types").VueTypeValidableDef<boolean>;
    forceRender: import("vue-types").VueTypeValidableDef<boolean>;
    expandIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    extra: import("vue-types").VueTypeValidableDef<any>;
    panelKey: import("vue-types").VueTypeDef<string | number>;
    collapsible: {
        type: import("vue").PropType<import("./commonProps").CollapsibleType>;
    };
    role: StringConstructor;
    onItemClick: {
        type: import("vue").PropType<(panelKey: string | number) => void>;
    };
}>> & {
    onItemClick?: (...args: any[]) => any;
}, {
    prefixCls: string;
    expandIcon: (...args: any[]) => any;
    openAnimation: {
        [key: string]: any;
    };
    headerClass: string;
}>;
export default _default;
