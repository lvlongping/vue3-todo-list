import type { ExtractPropTypes } from 'vue';
export declare const popoverProps: () => {
    content: import("vue-types").VueTypeValidableDef<any>;
    title: import("vue-types").VueTypeValidableDef<any>;
    trigger: import("vue-types").VueTypeDef<"click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[]>;
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    defaultVisible: import("vue-types").VueTypeValidableDef<boolean>;
    placement: import("vue-types").VueTypeDef<"left" | "right" | "bottom" | "top" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom">;
    color: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    openClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    arrowPointAtCenter: import("vue-types").VueTypeValidableDef<boolean>;
    autoAdjustOverflow: import("vue-types").VueTypeDef<boolean | {
        [key: string]: any;
    }>;
    destroyTooltipOnHide: import("vue-types").VueTypeValidableDef<boolean>;
    align: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    builtinPlacements: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    children: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    onVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:visible': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
export declare type PopoverProps = Partial<ExtractPropTypes<ReturnType<typeof popoverProps>>>;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            color: string;
            align: {
                [key: string]: any;
            };
            getPopupContainer: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            transitionName: string;
            builtinPlacements: {
                [key: string]: any;
            };
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            onVisibleChange: (...args: any[]) => any;
            openClassName: string;
            children: unknown[];
        }> & Omit<Readonly<ExtractPropTypes<{
            content: import("vue-types").VueTypeValidableDef<any>;
            title: import("vue-types").VueTypeValidableDef<any>;
            trigger: import("vue-types").VueTypeDef<"click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[]>;
            visible: import("vue-types").VueTypeValidableDef<boolean>;
            defaultVisible: import("vue-types").VueTypeValidableDef<boolean>;
            placement: import("vue-types").VueTypeDef<"left" | "right" | "bottom" | "top" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom">;
            color: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            transitionName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
            overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            openClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            arrowPointAtCenter: import("vue-types").VueTypeValidableDef<boolean>;
            autoAdjustOverflow: import("vue-types").VueTypeDef<boolean | {
                [key: string]: any;
            }>;
            destroyTooltipOnHide: import("vue-types").VueTypeValidableDef<boolean>;
            align: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            };
            builtinPlacements: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            };
            children: import("vue-types").VueTypeValidableDef<unknown[]> & {
                default: () => unknown[];
            };
            onVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            'onUpdate:visible': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "color" | "align" | "getPopupContainer" | "onUpdate:visible" | "transitionName" | "builtinPlacements" | "mouseEnterDelay" | "mouseLeaveDelay" | "overlayClassName" | "onVisibleChange" | "openClassName" | "children">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
            content: import("vue-types").VueTypeValidableDef<any>;
            title: import("vue-types").VueTypeValidableDef<any>;
            trigger: import("vue-types").VueTypeDef<"click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[]>;
            visible: import("vue-types").VueTypeValidableDef<boolean>;
            defaultVisible: import("vue-types").VueTypeValidableDef<boolean>;
            placement: import("vue-types").VueTypeDef<"left" | "right" | "bottom" | "top" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom">;
            color: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            transitionName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
            overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            openClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            arrowPointAtCenter: import("vue-types").VueTypeValidableDef<boolean>;
            autoAdjustOverflow: import("vue-types").VueTypeDef<boolean | {
                [key: string]: any;
            }>;
            destroyTooltipOnHide: import("vue-types").VueTypeValidableDef<boolean>;
            align: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            };
            builtinPlacements: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            };
            children: import("vue-types").VueTypeValidableDef<unknown[]> & {
                default: () => unknown[];
            };
            onVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            'onUpdate:visible': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            color: string;
            align: {
                [key: string]: any;
            };
            getPopupContainer: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            transitionName: string;
            builtinPlacements: {
                [key: string]: any;
            };
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            overlayClassName: string;
            onVisibleChange: (...args: any[]) => any;
            openClassName: string;
            children: unknown[];
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<ExtractPropTypes<{
        content: import("vue-types").VueTypeValidableDef<any>;
        title: import("vue-types").VueTypeValidableDef<any>;
        trigger: import("vue-types").VueTypeDef<"click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[]>;
        visible: import("vue-types").VueTypeValidableDef<boolean>;
        defaultVisible: import("vue-types").VueTypeValidableDef<boolean>;
        placement: import("vue-types").VueTypeDef<"left" | "right" | "bottom" | "top" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom">;
        color: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        transitionName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
        overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        openClassName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        arrowPointAtCenter: import("vue-types").VueTypeValidableDef<boolean>;
        autoAdjustOverflow: import("vue-types").VueTypeDef<boolean | {
            [key: string]: any;
        }>;
        destroyTooltipOnHide: import("vue-types").VueTypeValidableDef<boolean>;
        align: import("vue-types").VueTypeValidableDef<{
            [key: string]: any;
        }> & {
            default: () => {
                [key: string]: any;
            };
        };
        builtinPlacements: import("vue-types").VueTypeValidableDef<{
            [key: string]: any;
        }> & {
            default: () => {
                [key: string]: any;
            };
        };
        children: import("vue-types").VueTypeValidableDef<unknown[]> & {
            default: () => unknown[];
        };
        onVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        'onUpdate:visible': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
    content: import("vue-types").VueTypeValidableDef<any>;
    title: import("vue-types").VueTypeValidableDef<any>;
    trigger: import("vue-types").VueTypeDef<"click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[]>;
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    defaultVisible: import("vue-types").VueTypeValidableDef<boolean>;
    placement: import("vue-types").VueTypeDef<"left" | "right" | "bottom" | "top" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom">;
    color: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    openClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    arrowPointAtCenter: import("vue-types").VueTypeValidableDef<boolean>;
    autoAdjustOverflow: import("vue-types").VueTypeDef<boolean | {
        [key: string]: any;
    }>;
    destroyTooltipOnHide: import("vue-types").VueTypeValidableDef<boolean>;
    align: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    builtinPlacements: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    children: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    onVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:visible': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    color: string;
    align: {
        [key: string]: any;
    };
    getPopupContainer: (...args: any[]) => any;
    "onUpdate:visible": (...args: any[]) => any;
    transitionName: string;
    builtinPlacements: {
        [key: string]: any;
    };
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    overlayClassName: string;
    onVisibleChange: (...args: any[]) => any;
    openClassName: string;
    children: unknown[];
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
