import type { App, ExtractPropTypes } from 'vue';
export declare const stepsProps: () => {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    iconPrefix: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    current: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    initial: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    percent: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    responsive: import("vue-types").VueTypeValidableDef<boolean>;
    labelPlacement: import("vue-types").VueTypeDef<"horizontal" | "vertical"> & {
        default: "horizontal" | "vertical";
    };
    status: import("vue-types").VueTypeDef<"wait" | "error" | "finish" | "process">;
    size: import("vue-types").VueTypeDef<"default" | "small">;
    direction: import("vue-types").VueTypeDef<"horizontal" | "vertical">;
    progressDot: import("vue-types").VueTypeDef<any>;
    type: import("vue-types").VueTypeDef<"default" | "navigation">;
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:current': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
export declare const stepProps: () => {
    description: import("vue-types").VueTypeValidableDef<any>;
    icon: import("vue-types").VueTypeValidableDef<any>;
    status: import("vue-types").VueTypeDef<"wait" | "error" | "finish" | "process">;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    title: import("vue-types").VueTypeValidableDef<any>;
    subTitle: import("vue-types").VueTypeValidableDef<any>;
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
export declare type StepsProps = Partial<ExtractPropTypes<ReturnType<typeof stepsProps>>>;
export declare type StepProps = Partial<ExtractPropTypes<ReturnType<typeof stepProps>>>;
export declare const Step: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    wrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    itemWidth: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    active: import("vue-types").VueTypeValidableDef<boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    status: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    iconPrefix: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    icon: import("vue-types").VueTypeValidableDef<any>;
    adjustMarginRight: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    stepNumber: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    stepIndex: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    description: import("vue-types").VueTypeValidableDef<any>;
    title: import("vue-types").VueTypeValidableDef<any>;
    subTitle: import("vue-types").VueTypeValidableDef<any>;
    progressDot: import("vue-types").VueTypeDef<any>;
    tailContent: import("vue-types").VueTypeValidableDef<any>;
    icons: import("vue-types").VueTypeLooseShape<{
        finish: any;
        error: any;
    }>;
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onStepClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    stepIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "stepClick")[], "click" | "stepClick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    wrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    itemWidth: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    active: import("vue-types").VueTypeValidableDef<boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    status: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    iconPrefix: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    icon: import("vue-types").VueTypeValidableDef<any>;
    adjustMarginRight: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    stepNumber: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    stepIndex: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    description: import("vue-types").VueTypeValidableDef<any>;
    title: import("vue-types").VueTypeValidableDef<any>;
    subTitle: import("vue-types").VueTypeValidableDef<any>;
    progressDot: import("vue-types").VueTypeDef<any>;
    tailContent: import("vue-types").VueTypeValidableDef<any>;
    icons: import("vue-types").VueTypeLooseShape<{
        finish: any;
        error: any;
    }>;
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onStepClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    stepIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}>> & {
    onClick?: (...args: any[]) => any;
    onStepClick?: (...args: any[]) => any;
}, {
    onClick: (...args: any[]) => any;
    prefixCls: string;
    status: string;
    itemWidth: string;
    stepIcon: (...args: any[]) => any;
    iconPrefix: string;
    onStepClick: (...args: any[]) => any;
    adjustMarginRight: string;
    stepNumber: number;
    stepIndex: number;
}>;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onChange: (...args: any[]) => any;
            initial: number;
            prefixCls: string;
            current: number;
            "onUpdate:current": (...args: any[]) => any;
            percent: number;
            iconPrefix: string;
            labelPlacement: "horizontal" | "vertical";
        }> & Omit<Readonly<ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            iconPrefix: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            current: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            initial: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            percent: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            responsive: import("vue-types").VueTypeValidableDef<boolean>;
            labelPlacement: import("vue-types").VueTypeDef<"horizontal" | "vertical"> & {
                default: "horizontal" | "vertical";
            };
            status: import("vue-types").VueTypeDef<"wait" | "error" | "finish" | "process">;
            size: import("vue-types").VueTypeDef<"default" | "small">;
            direction: import("vue-types").VueTypeDef<"horizontal" | "vertical">;
            progressDot: import("vue-types").VueTypeDef<any>;
            type: import("vue-types").VueTypeDef<"default" | "navigation">;
            onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            'onUpdate:current': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
        }>> & {
            onChange?: (...args: any[]) => any;
            "onUpdate:current"?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "onChange" | "initial" | "prefixCls" | "current" | "onUpdate:current" | "percent" | "iconPrefix" | "labelPlacement">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "update:current", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            iconPrefix: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            current: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            initial: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            percent: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            responsive: import("vue-types").VueTypeValidableDef<boolean>;
            labelPlacement: import("vue-types").VueTypeDef<"horizontal" | "vertical"> & {
                default: "horizontal" | "vertical";
            };
            status: import("vue-types").VueTypeDef<"wait" | "error" | "finish" | "process">;
            size: import("vue-types").VueTypeDef<"default" | "small">;
            direction: import("vue-types").VueTypeDef<"horizontal" | "vertical">;
            progressDot: import("vue-types").VueTypeDef<any>;
            type: import("vue-types").VueTypeDef<"default" | "navigation">;
            onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            'onUpdate:current': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
        }>> & {
            onChange?: (...args: any[]) => any;
            "onUpdate:current"?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:current")[], string, {
            onChange: (...args: any[]) => any;
            initial: number;
            prefixCls: string;
            current: number;
            "onUpdate:current": (...args: any[]) => any;
            percent: number;
            iconPrefix: string;
            labelPlacement: "horizontal" | "vertical";
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        iconPrefix: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        current: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        initial: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        percent: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        responsive: import("vue-types").VueTypeValidableDef<boolean>;
        labelPlacement: import("vue-types").VueTypeDef<"horizontal" | "vertical"> & {
            default: "horizontal" | "vertical";
        };
        status: import("vue-types").VueTypeDef<"wait" | "error" | "finish" | "process">;
        size: import("vue-types").VueTypeDef<"default" | "small">;
        direction: import("vue-types").VueTypeDef<"horizontal" | "vertical">;
        progressDot: import("vue-types").VueTypeDef<any>;
        type: import("vue-types").VueTypeDef<"default" | "navigation">;
        onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        'onUpdate:current': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
    }>> & {
        onChange?: (...args: any[]) => any;
        "onUpdate:current"?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    iconPrefix: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    current: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    initial: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    percent: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    responsive: import("vue-types").VueTypeValidableDef<boolean>;
    labelPlacement: import("vue-types").VueTypeDef<"horizontal" | "vertical"> & {
        default: "horizontal" | "vertical";
    };
    status: import("vue-types").VueTypeDef<"wait" | "error" | "finish" | "process">;
    size: import("vue-types").VueTypeDef<"default" | "small">;
    direction: import("vue-types").VueTypeDef<"horizontal" | "vertical">;
    progressDot: import("vue-types").VueTypeDef<any>;
    type: import("vue-types").VueTypeDef<"default" | "navigation">;
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:current': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:current"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:current")[], "change" | "update:current", {
    onChange: (...args: any[]) => any;
    initial: number;
    prefixCls: string;
    current: number;
    "onUpdate:current": (...args: any[]) => any;
    percent: number;
    iconPrefix: string;
    labelPlacement: "horizontal" | "vertical";
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Step: import("vue").DefineComponent<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        wrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
        itemWidth: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        active: import("vue-types").VueTypeValidableDef<boolean>;
        disabled: import("vue-types").VueTypeValidableDef<boolean>;
        status: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        iconPrefix: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        icon: import("vue-types").VueTypeValidableDef<any>;
        adjustMarginRight: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        stepNumber: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        stepIndex: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        description: import("vue-types").VueTypeValidableDef<any>;
        title: import("vue-types").VueTypeValidableDef<any>;
        subTitle: import("vue-types").VueTypeValidableDef<any>;
        progressDot: import("vue-types").VueTypeDef<any>;
        tailContent: import("vue-types").VueTypeValidableDef<any>;
        icons: import("vue-types").VueTypeLooseShape<{
            finish: any;
            error: any;
        }>;
        onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        onStepClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        stepIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "stepClick")[], "click" | "stepClick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        wrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
        itemWidth: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        active: import("vue-types").VueTypeValidableDef<boolean>;
        disabled: import("vue-types").VueTypeValidableDef<boolean>;
        status: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        iconPrefix: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        icon: import("vue-types").VueTypeValidableDef<any>;
        adjustMarginRight: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        stepNumber: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        stepIndex: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        description: import("vue-types").VueTypeValidableDef<any>;
        title: import("vue-types").VueTypeValidableDef<any>;
        subTitle: import("vue-types").VueTypeValidableDef<any>;
        progressDot: import("vue-types").VueTypeDef<any>;
        tailContent: import("vue-types").VueTypeValidableDef<any>;
        icons: import("vue-types").VueTypeLooseShape<{
            finish: any;
            error: any;
        }>;
        onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        onStepClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        stepIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
    }>> & {
        onClick?: (...args: any[]) => any;
        onStepClick?: (...args: any[]) => any;
    }, {
        onClick: (...args: any[]) => any;
        prefixCls: string;
        status: string;
        itemWidth: string;
        stepIcon: (...args: any[]) => any;
        iconPrefix: string;
        onStepClick: (...args: any[]) => any;
        adjustMarginRight: string;
        stepNumber: number;
        stepIndex: number;
    }>;
    install: (app: App) => App<any>;
};
export default _default;
