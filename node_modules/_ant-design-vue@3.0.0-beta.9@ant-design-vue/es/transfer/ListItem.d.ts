import type { ExtractPropTypes } from 'vue';
export declare const transferListItemProps: {
    renderedText: import("vue-types").VueTypeValidableDef<any>;
    renderedEl: import("vue-types").VueTypeValidableDef<any>;
    item: import("vue-types").VueTypeValidableDef<any>;
    checked: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    showRemove: import("vue-types").VueTypeValidableDef<boolean>;
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onRemove: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
export declare type TransferListItemProps = Partial<ExtractPropTypes<typeof transferListItemProps>>;
declare const _default: import("vue").DefineComponent<{
    renderedText: import("vue-types").VueTypeValidableDef<any>;
    renderedEl: import("vue-types").VueTypeValidableDef<any>;
    item: import("vue-types").VueTypeValidableDef<any>;
    checked: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    showRemove: import("vue-types").VueTypeValidableDef<boolean>;
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onRemove: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "remove")[], "click" | "remove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    renderedText: import("vue-types").VueTypeValidableDef<any>;
    renderedEl: import("vue-types").VueTypeValidableDef<any>;
    item: import("vue-types").VueTypeValidableDef<any>;
    checked: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    showRemove: import("vue-types").VueTypeValidableDef<boolean>;
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onRemove: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}>> & {
    onClick?: (...args: any[]) => any;
    onRemove?: (...args: any[]) => any;
}, {
    onClick: (...args: any[]) => any;
    prefixCls: string;
    onRemove: (...args: any[]) => any;
}>;
export default _default;
