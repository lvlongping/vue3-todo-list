import type { Plugin, ExtractPropTypes, PropType } from 'vue';
import Item from './Item';
import ItemMeta from './ItemMeta';
export { ListItemProps } from './Item';
export type { ListItemMetaProps } from './ItemMeta';
export declare type ColumnType = 'gutter' | 'column' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
export declare type ColumnCount = number;
export interface ListGridType {
    gutter?: number;
    column?: ColumnCount;
    xs?: ColumnCount;
    sm?: ColumnCount;
    md?: ColumnCount;
    lg?: ColumnCount;
    xl?: ColumnCount;
    xxl?: ColumnCount;
}
export declare const ListSize: ["small", "default", "large"];
export declare type ListItemLayout = 'horizontal' | 'vertical';
export declare const listProps: {
    bordered: import("vue-types").VueTypeValidableDef<boolean>;
    dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    extra: import("vue-types").VueTypeValidableDef<any>;
    grid: {
        type: PropType<ListGridType>;
        default: any;
    };
    itemLayout: import("vue-types").VueTypeDef<"horizontal" | "vertical">;
    loading: import("vue-types").VueTypeDef<boolean | {
        [key: string]: any;
    }>;
    loadMore: import("vue-types").VueTypeValidableDef<any>;
    pagination: import("vue-types").VueTypeDef<boolean | Partial<ExtractPropTypes<{
        position: import("vue-types").VueTypeDef<"both" | "bottom" | "top">;
        total: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        defaultCurrent: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        disabled: import("vue-types").VueTypeValidableDef<boolean>;
        current: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        defaultPageSize: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        pageSize: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        hideOnSinglePage: import("vue-types").VueTypeValidableDef<boolean>;
        showSizeChanger: import("vue-types").VueTypeValidableDef<boolean>;
        pageSizeOptions: import("vue-types").VueTypeDef<(string | number)[]>;
        buildOptionText: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        showSizeChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        showQuickJumper: import("vue-types").VueTypeDef<boolean | {
            [key: string]: any;
        }>;
        showTotal: import("vue-types").VueTypeValidableDef<any>;
        size: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        simple: import("vue-types").VueTypeValidableDef<boolean>;
        locale: import("vue-types").VueTypeValidableDef<{
            [key: string]: any;
        }> & {
            default: () => {
                [key: string]: any;
            };
        };
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        selectPrefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        itemRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        role: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        showLessItems: import("vue-types").VueTypeValidableDef<boolean>;
        onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        onShowSizeChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        'onUpdate:current': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        'onUpdate:pageSize': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
    }>>>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    rowKey: import("vue-types").VueTypeValidableDef<any>;
    renderItem: import("vue-types").VueTypeValidableDef<any>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
    split: import("vue-types").VueTypeValidableDef<boolean>;
    header: import("vue-types").VueTypeValidableDef<any>;
    footer: import("vue-types").VueTypeValidableDef<any>;
    locale: {
        type: PropType<ListLocale>;
    };
};
export interface ListLocale {
    emptyText: any;
}
export declare type ListProps = Partial<ExtractPropTypes<typeof listProps>>;
export { ItemMeta as ListItemMeta, Item as ListItem };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            grid: any;
            dataSource: unknown[];
        }> & Omit<Readonly<ExtractPropTypes<{
            bordered: import("vue-types").VueTypeValidableDef<boolean>;
            dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
                default: () => unknown[];
            };
            extra: import("vue-types").VueTypeValidableDef<any>;
            grid: {
                type: PropType<ListGridType>;
                default: any;
            };
            itemLayout: import("vue-types").VueTypeDef<"horizontal" | "vertical">;
            loading: import("vue-types").VueTypeDef<boolean | {
                [key: string]: any;
            }>;
            loadMore: import("vue-types").VueTypeValidableDef<any>;
            pagination: import("vue-types").VueTypeDef<boolean | Partial<ExtractPropTypes<{
                position: import("vue-types").VueTypeDef<"both" | "bottom" | "top">;
                total: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                defaultCurrent: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                disabled: import("vue-types").VueTypeValidableDef<boolean>;
                current: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                defaultPageSize: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                pageSize: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                hideOnSinglePage: import("vue-types").VueTypeValidableDef<boolean>;
                showSizeChanger: import("vue-types").VueTypeValidableDef<boolean>;
                pageSizeOptions: import("vue-types").VueTypeDef<(string | number)[]>;
                buildOptionText: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                showSizeChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                showQuickJumper: import("vue-types").VueTypeDef<boolean | {
                    [key: string]: any;
                }>;
                showTotal: import("vue-types").VueTypeValidableDef<any>;
                size: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                simple: import("vue-types").VueTypeValidableDef<boolean>;
                locale: import("vue-types").VueTypeValidableDef<{
                    [key: string]: any;
                }> & {
                    default: () => {
                        [key: string]: any;
                    };
                };
                prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                selectPrefixCls: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                itemRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                role: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                showLessItems: import("vue-types").VueTypeValidableDef<boolean>;
                onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                onShowSizeChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                'onUpdate:current': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                'onUpdate:pageSize': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
            }>>>;
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            rowKey: import("vue-types").VueTypeValidableDef<any>;
            renderItem: import("vue-types").VueTypeValidableDef<any>;
            size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
            split: import("vue-types").VueTypeValidableDef<boolean>;
            header: import("vue-types").VueTypeValidableDef<any>;
            footer: import("vue-types").VueTypeValidableDef<any>;
            locale: {
                type: PropType<ListLocale>;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "grid" | "dataSource">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
            bordered: import("vue-types").VueTypeValidableDef<boolean>;
            dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
                default: () => unknown[];
            };
            extra: import("vue-types").VueTypeValidableDef<any>;
            grid: {
                type: PropType<ListGridType>;
                default: any;
            };
            itemLayout: import("vue-types").VueTypeDef<"horizontal" | "vertical">;
            loading: import("vue-types").VueTypeDef<boolean | {
                [key: string]: any;
            }>;
            loadMore: import("vue-types").VueTypeValidableDef<any>;
            pagination: import("vue-types").VueTypeDef<boolean | Partial<ExtractPropTypes<{
                position: import("vue-types").VueTypeDef<"both" | "bottom" | "top">;
                total: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                defaultCurrent: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                disabled: import("vue-types").VueTypeValidableDef<boolean>;
                current: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                defaultPageSize: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                pageSize: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                hideOnSinglePage: import("vue-types").VueTypeValidableDef<boolean>;
                showSizeChanger: import("vue-types").VueTypeValidableDef<boolean>;
                pageSizeOptions: import("vue-types").VueTypeDef<(string | number)[]>;
                buildOptionText: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                showSizeChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                showQuickJumper: import("vue-types").VueTypeDef<boolean | {
                    [key: string]: any;
                }>;
                showTotal: import("vue-types").VueTypeValidableDef<any>;
                size: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                simple: import("vue-types").VueTypeValidableDef<boolean>;
                locale: import("vue-types").VueTypeValidableDef<{
                    [key: string]: any;
                }> & {
                    default: () => {
                        [key: string]: any;
                    };
                };
                prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                selectPrefixCls: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                itemRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                role: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                showLessItems: import("vue-types").VueTypeValidableDef<boolean>;
                onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                onShowSizeChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                'onUpdate:current': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
                'onUpdate:pageSize': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                };
            }>>>;
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            rowKey: import("vue-types").VueTypeValidableDef<any>;
            renderItem: import("vue-types").VueTypeValidableDef<any>;
            size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
            split: import("vue-types").VueTypeValidableDef<boolean>;
            header: import("vue-types").VueTypeValidableDef<any>;
            footer: import("vue-types").VueTypeValidableDef<any>;
            locale: {
                type: PropType<ListLocale>;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            grid: any;
            dataSource: unknown[];
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<ExtractPropTypes<{
        bordered: import("vue-types").VueTypeValidableDef<boolean>;
        dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
            default: () => unknown[];
        };
        extra: import("vue-types").VueTypeValidableDef<any>;
        grid: {
            type: PropType<ListGridType>;
            default: any;
        };
        itemLayout: import("vue-types").VueTypeDef<"horizontal" | "vertical">;
        loading: import("vue-types").VueTypeDef<boolean | {
            [key: string]: any;
        }>;
        loadMore: import("vue-types").VueTypeValidableDef<any>;
        pagination: import("vue-types").VueTypeDef<boolean | Partial<ExtractPropTypes<{
            position: import("vue-types").VueTypeDef<"both" | "bottom" | "top">;
            total: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            defaultCurrent: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            disabled: import("vue-types").VueTypeValidableDef<boolean>;
            current: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            defaultPageSize: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            pageSize: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            hideOnSinglePage: import("vue-types").VueTypeValidableDef<boolean>;
            showSizeChanger: import("vue-types").VueTypeValidableDef<boolean>;
            pageSizeOptions: import("vue-types").VueTypeDef<(string | number)[]>;
            buildOptionText: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            showSizeChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            showQuickJumper: import("vue-types").VueTypeDef<boolean | {
                [key: string]: any;
            }>;
            showTotal: import("vue-types").VueTypeValidableDef<any>;
            size: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            simple: import("vue-types").VueTypeValidableDef<boolean>;
            locale: import("vue-types").VueTypeValidableDef<{
                [key: string]: any;
            }> & {
                default: () => {
                    [key: string]: any;
                };
            };
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            selectPrefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            itemRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            role: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            showLessItems: import("vue-types").VueTypeValidableDef<boolean>;
            onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            onShowSizeChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            'onUpdate:current': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            'onUpdate:pageSize': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
        }>>>;
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        rowKey: import("vue-types").VueTypeValidableDef<any>;
        renderItem: import("vue-types").VueTypeValidableDef<any>;
        size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
        split: import("vue-types").VueTypeValidableDef<boolean>;
        header: import("vue-types").VueTypeValidableDef<any>;
        footer: import("vue-types").VueTypeValidableDef<any>;
        locale: {
            type: PropType<ListLocale>;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
    bordered: import("vue-types").VueTypeValidableDef<boolean>;
    dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    extra: import("vue-types").VueTypeValidableDef<any>;
    grid: {
        type: PropType<ListGridType>;
        default: any;
    };
    itemLayout: import("vue-types").VueTypeDef<"horizontal" | "vertical">;
    loading: import("vue-types").VueTypeDef<boolean | {
        [key: string]: any;
    }>;
    loadMore: import("vue-types").VueTypeValidableDef<any>;
    pagination: import("vue-types").VueTypeDef<boolean | Partial<ExtractPropTypes<{
        position: import("vue-types").VueTypeDef<"both" | "bottom" | "top">;
        total: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        defaultCurrent: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        disabled: import("vue-types").VueTypeValidableDef<boolean>;
        current: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        defaultPageSize: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        pageSize: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        hideOnSinglePage: import("vue-types").VueTypeValidableDef<boolean>;
        showSizeChanger: import("vue-types").VueTypeValidableDef<boolean>;
        pageSizeOptions: import("vue-types").VueTypeDef<(string | number)[]>;
        buildOptionText: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        showSizeChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        showQuickJumper: import("vue-types").VueTypeDef<boolean | {
            [key: string]: any;
        }>;
        showTotal: import("vue-types").VueTypeValidableDef<any>;
        size: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        simple: import("vue-types").VueTypeValidableDef<boolean>;
        locale: import("vue-types").VueTypeValidableDef<{
            [key: string]: any;
        }> & {
            default: () => {
                [key: string]: any;
            };
        };
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        selectPrefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        itemRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        role: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        showLessItems: import("vue-types").VueTypeValidableDef<boolean>;
        onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        onShowSizeChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        'onUpdate:current': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        'onUpdate:pageSize': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
    }>>>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    rowKey: import("vue-types").VueTypeValidableDef<any>;
    renderItem: import("vue-types").VueTypeValidableDef<any>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
    split: import("vue-types").VueTypeValidableDef<boolean>;
    header: import("vue-types").VueTypeValidableDef<any>;
    footer: import("vue-types").VueTypeValidableDef<any>;
    locale: {
        type: PropType<ListLocale>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    grid: any;
    dataSource: unknown[];
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Item: typeof Item & {
        readonly Meta: typeof ItemMeta;
    };
};
export default _default;
