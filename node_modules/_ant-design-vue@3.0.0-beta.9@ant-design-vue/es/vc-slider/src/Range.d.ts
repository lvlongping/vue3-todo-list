declare const _default: import("vue").DefineComponent<{
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    min: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    max: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    step: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    marks: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    included: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    handle: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    dots: import("vue-types").VueTypeValidableDef<boolean>;
    vertical: import("vue-types").VueTypeValidableDef<boolean>;
    reverse: import("vue-types").VueTypeValidableDef<boolean>;
    minimumTrackStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    maximumTrackStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    handleStyle: import("vue-types").VueTypeDef<{
        [key: string]: any;
    } | {
        [key: string]: any;
    }[]>;
    trackStyle: import("vue-types").VueTypeDef<{
        [key: string]: any;
    } | {
        [key: string]: any;
    }[]>;
    railStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    dotStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    activeDotStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    draggableTrack: import("vue-types").VueTypeValidableDef<boolean>;
}, unknown, {}, {}, {
    defaultHandle({ index, directives, className, style, ...restProps }: {
        [x: string]: any;
        index: any;
        directives: any;
        className: any;
        style: any;
    }): JSX.Element;
    onDown(e: any, position: any): void;
    onMouseDown(e: any): void;
    onTouchStart(e: any): void;
    onFocus(e: any): void;
    onBlur(e: any): void;
    onMouseUp(): void;
    onMouseMove(e: any): void;
    onTouchMove(e: any): void;
    onKeyDown(e: any): void;
    onClickMarkLabel(e: any, value: any): void;
    getSliderStart(): any;
    getSliderLength(): any;
    addDocumentTouchEvents(): void;
    addDocumentMouseEvents(): void;
    removeDocumentEvents(): void;
    focus(): void;
    blur(): void;
    calcValue(offset: any): any;
    calcValueByPos(position: any): any;
    calcOffset(value: any): number;
    saveSlider(slider: any): void;
    saveHandle(index: any, handle: any): void;
}, any, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus")[], "blur" | "change" | "focus", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    min: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    max: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    step: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    marks: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    included: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    handle: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    dots: import("vue-types").VueTypeValidableDef<boolean>;
    vertical: import("vue-types").VueTypeValidableDef<boolean>;
    reverse: import("vue-types").VueTypeValidableDef<boolean>;
    minimumTrackStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    maximumTrackStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    handleStyle: import("vue-types").VueTypeDef<{
        [key: string]: any;
    } | {
        [key: string]: any;
    }[]>;
    trackStyle: import("vue-types").VueTypeDef<{
        [key: string]: any;
    } | {
        [key: string]: any;
    }[]>;
    railStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    dotStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    activeDotStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    draggableTrack: import("vue-types").VueTypeValidableDef<boolean>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
}, {
    prefixCls: string;
    step: number;
    max: number;
    min: number;
    id: string;
    marks: {
        [key: string]: any;
    };
    dotStyle: {
        [key: string]: any;
    };
    activeDotStyle: {
        [key: string]: any;
    };
    railStyle: {
        [key: string]: any;
    };
    handle: (...args: any[]) => any;
    minimumTrackStyle: {
        [key: string]: any;
    };
    maximumTrackStyle: {
        [key: string]: any;
    };
}>;
export default _default;
