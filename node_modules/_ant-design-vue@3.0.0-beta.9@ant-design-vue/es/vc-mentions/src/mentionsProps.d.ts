import type { PropType } from 'vue';
import { filterOption as defaultFilterOption, validateSearch as defaultValidateSearch } from './util';
export declare const PlaceMent: ["top", "bottom"];
export declare type Direction = 'ltr' | 'rtl';
export declare const mentionsProps: {
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    prefix: import("vue-types").VueTypeDef<string | string[]>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    split: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: import("vue-types").VueTypeDef<"bottom" | "top">;
    character: import("vue-types").VueTypeValidableDef<any>;
    characterRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    filterOption: {
        type: PropType<false | typeof defaultFilterOption>;
    };
    validateSearch: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    getPopupContainer: {
        type: PropType<() => HTMLElement>;
    };
    options: {
        type: PropType<Partial<import("vue").ExtractPropTypes<{
            value: StringConstructor;
            disabled: BooleanConstructor;
            label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
        }>>>;
        default: () => any;
    };
    loading: import("vue-types").VueTypeValidableDef<boolean>;
    rows: (StringConstructor | NumberConstructor)[];
    direction: {
        type: PropType<Direction>;
    };
};
export declare const vcMentionsProps: {
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    prefix: import("vue-types").VueTypeDef<string | string[]>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    split: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: import("vue-types").VueTypeDef<"bottom" | "top">;
    character: import("vue-types").VueTypeValidableDef<any>;
    characterRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    filterOption: {
        type: PropType<false | typeof defaultFilterOption>;
    };
    validateSearch: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    getPopupContainer: {
        type: PropType<() => HTMLElement>;
    };
    options: {
        type: PropType<Partial<import("vue").ExtractPropTypes<{
            value: StringConstructor;
            disabled: BooleanConstructor;
            label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
        }>>>;
        default: () => any;
    };
    loading: import("vue-types").VueTypeValidableDef<boolean>;
    rows: (StringConstructor | NumberConstructor)[];
    direction: {
        type: PropType<Direction>;
    };
};
export declare const defaultProps: {
    prefix: string;
    split: string;
    rows: number;
    validateSearch: typeof defaultValidateSearch;
    filterOption: any;
};
declare const _default: {
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    prefix: import("vue-types").VueTypeDef<string | string[]>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    split: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: import("vue-types").VueTypeDef<"bottom" | "top">;
    character: import("vue-types").VueTypeValidableDef<any>;
    characterRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    filterOption: {
        type: PropType<false | typeof defaultFilterOption>;
    };
    validateSearch: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    getPopupContainer: {
        type: PropType<() => HTMLElement>;
    };
    options: {
        type: PropType<Partial<import("vue").ExtractPropTypes<{
            value: StringConstructor;
            disabled: BooleanConstructor;
            label: (FunctionConstructor | StringConstructor | NumberConstructor)[];
        }>>>;
        default: () => any;
    };
    loading: import("vue-types").VueTypeValidableDef<boolean>;
    rows: (StringConstructor | NumberConstructor)[];
    direction: {
        type: PropType<Direction>;
    };
};
export default _default;
