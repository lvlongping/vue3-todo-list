import type { Plugin } from 'vue';
import ButtonGroup from './button-group';
import type { ButtonProps, ButtonShape, ButtonType } from './buttonTypes';
import type { ButtonGroupProps } from './button-group';
import type { SizeType as ButtonSize } from '../config-provider';
export type { ButtonProps, ButtonShape, ButtonType, ButtonGroupProps, ButtonSize };
export { ButtonGroup };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            title: string;
            htmlType: "submit" | "button" | "reset";
            loading: boolean | {
                delay?: number;
            };
            href: string;
            target: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            type: import("vue-types").VueTypeDef<"default" | "link" | "text" | "dashed" | "ghost" | "primary">;
            htmlType: import("vue-types").VueTypeDef<"submit" | "button" | "reset"> & {
                default: "submit" | "button" | "reset";
            };
            shape: import("vue-types").VueTypeDef<"circle" | "round">;
            size: {
                type: import("vue").PropType<ButtonSize>;
            };
            loading: {
                type: import("vue").PropType<boolean | {
                    delay?: number;
                }>;
                default: () => boolean | {
                    delay?: number;
                };
            };
            disabled: import("vue-types").VueTypeValidableDef<boolean>;
            ghost: import("vue-types").VueTypeValidableDef<boolean>;
            block: import("vue-types").VueTypeValidableDef<boolean>;
            danger: import("vue-types").VueTypeValidableDef<boolean>;
            icon: import("vue-types").VueTypeValidableDef<any>;
            href: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            target: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            title: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            onClick: {
                type: import("vue").PropType<(event: MouseEvent) => void>;
            };
        }>> & {
            onClick?: (...args: any[]) => any;
            onMousedown?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "title" | "htmlType" | "loading" | "href" | "target">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "click" | "mousedown", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            type: import("vue-types").VueTypeDef<"default" | "link" | "text" | "dashed" | "ghost" | "primary">;
            htmlType: import("vue-types").VueTypeDef<"submit" | "button" | "reset"> & {
                default: "submit" | "button" | "reset";
            };
            shape: import("vue-types").VueTypeDef<"circle" | "round">;
            size: {
                type: import("vue").PropType<ButtonSize>;
            };
            loading: {
                type: import("vue").PropType<boolean | {
                    delay?: number;
                }>;
                default: () => boolean | {
                    delay?: number;
                };
            };
            disabled: import("vue-types").VueTypeValidableDef<boolean>;
            ghost: import("vue-types").VueTypeValidableDef<boolean>;
            block: import("vue-types").VueTypeValidableDef<boolean>;
            danger: import("vue-types").VueTypeValidableDef<boolean>;
            icon: import("vue-types").VueTypeValidableDef<any>;
            href: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            target: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            title: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            onClick: {
                type: import("vue").PropType<(event: MouseEvent) => void>;
            };
        }>> & {
            onClick?: (...args: any[]) => any;
            onMousedown?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "mousedown")[], string, {
            prefixCls: string;
            title: string;
            htmlType: "submit" | "button" | "reset";
            loading: boolean | {
                delay?: number;
            };
            href: string;
            target: string;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        type: import("vue-types").VueTypeDef<"default" | "link" | "text" | "dashed" | "ghost" | "primary">;
        htmlType: import("vue-types").VueTypeDef<"submit" | "button" | "reset"> & {
            default: "submit" | "button" | "reset";
        };
        shape: import("vue-types").VueTypeDef<"circle" | "round">;
        size: {
            type: import("vue").PropType<ButtonSize>;
        };
        loading: {
            type: import("vue").PropType<boolean | {
                delay?: number;
            }>;
            default: () => boolean | {
                delay?: number;
            };
        };
        disabled: import("vue-types").VueTypeValidableDef<boolean>;
        ghost: import("vue-types").VueTypeValidableDef<boolean>;
        block: import("vue-types").VueTypeValidableDef<boolean>;
        danger: import("vue-types").VueTypeValidableDef<boolean>;
        icon: import("vue-types").VueTypeValidableDef<any>;
        href: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        target: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        title: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        onClick: {
            type: import("vue").PropType<(event: MouseEvent) => void>;
        };
    }>> & {
        onClick?: (...args: any[]) => any;
        onMousedown?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    type: import("vue-types").VueTypeDef<"default" | "link" | "text" | "dashed" | "ghost" | "primary">;
    htmlType: import("vue-types").VueTypeDef<"submit" | "button" | "reset"> & {
        default: "submit" | "button" | "reset";
    };
    shape: import("vue-types").VueTypeDef<"circle" | "round">;
    size: {
        type: import("vue").PropType<ButtonSize>;
    };
    loading: {
        type: import("vue").PropType<boolean | {
            delay?: number;
        }>;
        default: () => boolean | {
            delay?: number;
        };
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    ghost: import("vue-types").VueTypeValidableDef<boolean>;
    block: import("vue-types").VueTypeValidableDef<boolean>;
    danger: import("vue-types").VueTypeValidableDef<boolean>;
    icon: import("vue-types").VueTypeValidableDef<any>;
    href: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    target: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    title: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    onClick: {
        type: import("vue").PropType<(event: MouseEvent) => void>;
    };
}>> & {
    onClick?: (...args: any[]) => any;
    onMousedown?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "mousedown")[], "click" | "mousedown", {
    prefixCls: string;
    title: string;
    htmlType: "submit" | "button" | "reset";
    loading: boolean | {
        delay?: number;
    };
    href: string;
    target: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Group: typeof ButtonGroup;
};
export default _default;
