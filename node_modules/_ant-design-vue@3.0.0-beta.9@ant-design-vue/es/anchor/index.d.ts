import type { Plugin } from 'vue';
import type { AnchorProps } from './Anchor';
import type { AnchorLinkProps } from './AnchorLink';
import AnchorLink from './AnchorLink';
export type { AnchorLinkProps, AnchorProps };
export { AnchorLink, AnchorLink as Link };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onChange: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            prefixCls: string;
            targetOffset: number;
            getContainer: (...args: any[]) => any;
            offsetTop: number;
            bounds: number;
            affix: boolean;
            showInkInFixed: boolean;
            wrapperClass: string;
            getCurrentAnchor: (...args: any[]) => any;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            offsetTop: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            bounds: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            affix: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            };
            showInkInFixed: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            };
            getContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            } & {
                default: (...args: any[]) => any;
            };
            wrapperClass: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            wrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
            getCurrentAnchor: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            targetOffset: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
        }>> & {
            onChange?: (...args: any[]) => any;
            onClick?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "onChange" | "onClick" | "prefixCls" | "targetOffset" | "getContainer" | "offsetTop" | "bounds" | "affix" | "showInkInFixed" | "wrapperClass" | "getCurrentAnchor">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "click", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            offsetTop: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            bounds: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            affix: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            };
            showInkInFixed: import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            };
            getContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            } & {
                default: (...args: any[]) => any;
            };
            wrapperClass: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            wrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
            getCurrentAnchor: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            targetOffset: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
        }>> & {
            onChange?: (...args: any[]) => any;
            onClick?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "click")[], string, {
            onChange: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            prefixCls: string;
            targetOffset: number;
            getContainer: (...args: any[]) => any;
            offsetTop: number;
            bounds: number;
            affix: boolean;
            showInkInFixed: boolean;
            wrapperClass: string;
            getCurrentAnchor: (...args: any[]) => any;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        offsetTop: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        bounds: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        affix: import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        };
        showInkInFixed: import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        };
        getContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        } & {
            default: (...args: any[]) => any;
        };
        wrapperClass: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        wrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
        getCurrentAnchor: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        targetOffset: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
    }>> & {
        onChange?: (...args: any[]) => any;
        onClick?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    offsetTop: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    bounds: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    affix: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    showInkInFixed: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    getContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    } & {
        default: (...args: any[]) => any;
    };
    wrapperClass: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    wrapperStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    getCurrentAnchor: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    targetOffset: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}>> & {
    onChange?: (...args: any[]) => any;
    onClick?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "click")[], "change" | "click", {
    onChange: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    prefixCls: string;
    targetOffset: number;
    getContainer: (...args: any[]) => any;
    offsetTop: number;
    bounds: number;
    affix: boolean;
    showInkInFixed: boolean;
    wrapperClass: string;
    getCurrentAnchor: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Link: typeof AnchorLink;
};
export default _default;
