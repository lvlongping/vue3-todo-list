import type { Plugin } from 'vue';
import Countdown from './Countdown';
export type { StatisticProps } from './Statistic';
export declare const StatisticCountdown: any;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            format: string;
            onFinish: (...args: any[]) => any;
            precision: number;
            decimalSeparator: string;
            groupSeparator: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            decimalSeparator: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            groupSeparator: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            format: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            value: {
                type: import("vue").PropType<import("./utils").countdownValueType>;
            };
            valueStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
            valueRender: import("vue-types").VueTypeValidableDef<any>;
            formatter: import("vue-types").VueTypeValidableDef<any>;
            precision: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            prefix: import("vue-types").VueTypeValidableDef<any>;
            suffix: import("vue-types").VueTypeValidableDef<any>;
            title: import("vue-types").VueTypeValidableDef<any>;
            onFinish: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            loading: import("vue-types").VueTypeValidableDef<boolean>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "format" | "onFinish" | "precision" | "decimalSeparator" | "groupSeparator">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            decimalSeparator: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            groupSeparator: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            format: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            value: {
                type: import("vue").PropType<import("./utils").countdownValueType>;
            };
            valueStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
            valueRender: import("vue-types").VueTypeValidableDef<any>;
            formatter: import("vue-types").VueTypeValidableDef<any>;
            precision: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            prefix: import("vue-types").VueTypeValidableDef<any>;
            suffix: import("vue-types").VueTypeValidableDef<any>;
            title: import("vue-types").VueTypeValidableDef<any>;
            onFinish: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            };
            loading: import("vue-types").VueTypeValidableDef<boolean>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            format: string;
            onFinish: (...args: any[]) => any;
            precision: number;
            decimalSeparator: string;
            groupSeparator: string;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        decimalSeparator: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        groupSeparator: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        format: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        value: {
            type: import("vue").PropType<import("./utils").countdownValueType>;
        };
        valueStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
        valueRender: import("vue-types").VueTypeValidableDef<any>;
        formatter: import("vue-types").VueTypeValidableDef<any>;
        precision: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        prefix: import("vue-types").VueTypeValidableDef<any>;
        suffix: import("vue-types").VueTypeValidableDef<any>;
        title: import("vue-types").VueTypeValidableDef<any>;
        onFinish: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        loading: import("vue-types").VueTypeValidableDef<boolean>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    decimalSeparator: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    groupSeparator: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    format: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: {
        type: import("vue").PropType<import("./utils").countdownValueType>;
    };
    valueStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    valueRender: import("vue-types").VueTypeValidableDef<any>;
    formatter: import("vue-types").VueTypeValidableDef<any>;
    precision: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    prefix: import("vue-types").VueTypeValidableDef<any>;
    suffix: import("vue-types").VueTypeValidableDef<any>;
    title: import("vue-types").VueTypeValidableDef<any>;
    onFinish: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    loading: import("vue-types").VueTypeValidableDef<boolean>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    format: string;
    onFinish: (...args: any[]) => any;
    precision: number;
    decimalSeparator: string;
    groupSeparator: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Countdown: typeof Countdown;
};
export default _default;
