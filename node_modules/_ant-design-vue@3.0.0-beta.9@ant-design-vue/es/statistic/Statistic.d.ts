import type { ExtractPropTypes, PropType } from 'vue';
import type { countdownValueType } from './utils';
export declare const statisticProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    decimalSeparator: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    groupSeparator: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    format: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: {
        type: PropType<countdownValueType>;
    };
    valueStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    valueRender: import("vue-types").VueTypeValidableDef<any>;
    formatter: import("vue-types").VueTypeValidableDef<any>;
    precision: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    prefix: import("vue-types").VueTypeValidableDef<any>;
    suffix: import("vue-types").VueTypeValidableDef<any>;
    title: import("vue-types").VueTypeValidableDef<any>;
    onFinish: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    loading: import("vue-types").VueTypeValidableDef<boolean>;
};
export declare type StatisticProps = Partial<ExtractPropTypes<typeof statisticProps>>;
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    decimalSeparator: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    groupSeparator: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    format: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: {
        type: PropType<countdownValueType>;
    };
    valueStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    valueRender: import("vue-types").VueTypeValidableDef<any>;
    formatter: import("vue-types").VueTypeValidableDef<any>;
    precision: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    prefix: import("vue-types").VueTypeValidableDef<any>;
    suffix: import("vue-types").VueTypeValidableDef<any>;
    title: import("vue-types").VueTypeValidableDef<any>;
    onFinish: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    loading: import("vue-types").VueTypeValidableDef<boolean>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    decimalSeparator: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    groupSeparator: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    format: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: {
        type: PropType<countdownValueType>;
    };
    valueStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    valueRender: import("vue-types").VueTypeValidableDef<any>;
    formatter: import("vue-types").VueTypeValidableDef<any>;
    precision: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    prefix: import("vue-types").VueTypeValidableDef<any>;
    suffix: import("vue-types").VueTypeValidableDef<any>;
    title: import("vue-types").VueTypeValidableDef<any>;
    onFinish: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    loading: import("vue-types").VueTypeValidableDef<boolean>;
}>>, {
    prefixCls: string;
    format: string;
    onFinish: (...args: any[]) => any;
    precision: number;
    decimalSeparator: string;
    groupSeparator: string;
}>;
export default _default;
