import type { PropType, VNode } from 'vue';
import type { Direction, SizeType } from '../config-provider';
export declare function hasPrefixSuffix(propsAndSlots: any): boolean;
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    inputType: import("vue-types").VueTypeDef<"input" | "text">;
    value: import("vue-types").VueTypeValidableDef<any>;
    defaultValue: import("vue-types").VueTypeValidableDef<any>;
    allowClear: import("vue-types").VueTypeValidableDef<boolean>;
    element: import("vue-types").VueTypeValidableDef<any>;
    handleReset: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    direction: {
        type: PropType<Direction>;
    };
    size: {
        type: PropType<SizeType>;
    };
    suffix: import("vue-types").VueTypeValidableDef<any>;
    prefix: import("vue-types").VueTypeValidableDef<any>;
    addonBefore: import("vue-types").VueTypeValidableDef<any>;
    addonAfter: import("vue-types").VueTypeValidableDef<any>;
    readonly: import("vue-types").VueTypeValidableDef<boolean>;
    focused: import("vue-types").VueTypeValidableDef<boolean>;
    bordered: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    triggerFocus: {
        type: PropType<() => void>;
    };
}, () => VNode<any, any, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    inputType: import("vue-types").VueTypeDef<"input" | "text">;
    value: import("vue-types").VueTypeValidableDef<any>;
    defaultValue: import("vue-types").VueTypeValidableDef<any>;
    allowClear: import("vue-types").VueTypeValidableDef<boolean>;
    element: import("vue-types").VueTypeValidableDef<any>;
    handleReset: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    direction: {
        type: PropType<Direction>;
    };
    size: {
        type: PropType<SizeType>;
    };
    suffix: import("vue-types").VueTypeValidableDef<any>;
    prefix: import("vue-types").VueTypeValidableDef<any>;
    addonBefore: import("vue-types").VueTypeValidableDef<any>;
    addonAfter: import("vue-types").VueTypeValidableDef<any>;
    readonly: import("vue-types").VueTypeValidableDef<boolean>;
    focused: import("vue-types").VueTypeValidableDef<boolean>;
    bordered: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    triggerFocus: {
        type: PropType<() => void>;
    };
}>>, {
    prefixCls: string;
    bordered: boolean;
    handleReset: (...args: any[]) => any;
}>;
export default _default;
